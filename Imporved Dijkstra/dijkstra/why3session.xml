<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Eprover" version="2.0" timelimit="20" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.15.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="DijkstraShortestPath">
 <goal name="Length_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Length_nonneg.0" proved="true">
  <proof prover="7"><result status="valid" time="0.002926" steps="1934"/></proof>
  </goal>
  <goal name="Length_nonneg.1" proved="true">
  <proof prover="7"><result status="valid" time="0.007903" steps="41450"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Shortest_length_nonneg" proved="true">
 <proof prover="8"><result status="valid" time="0.005578" steps="8"/></proof>
 </goal>
 <goal name="shortest_path_to_self" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="shortest_path_to_self.0" proved="true">
  <transf name="assert" proved="true" arg1="(path v v 0)">
   <goal name="shortest_path_to_self.0.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="0.006436" steps="26979"/></proof>
   </goal>
   <goal name="shortest_path_to_self.0.1" proved="true">
   <proof prover="3"><result status="valid" time="0.009746" steps="5897"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_one_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_one_step.0" proved="true">
  <transf name="assert" proved="true" arg1="(path a a 0 /\ path b b 0)">
   <goal name="Path_one_step.0.0" expl="asserted formula" proved="true">
   <proof prover="8"><result status="valid" time="0.005405" steps="4"/></proof>
   </goal>
   <goal name="Path_one_step.0.1" proved="true">
   <proof prover="7"><result status="valid" time="0.007856" steps="42870"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_append" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_append.0" proved="true">
  <transf name="assert" proved="true" arg1="(path u u 0)">
   <goal name="Path_append.0.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="0.007271" steps="43066"/></proof>
   </goal>
   <goal name="Path_append.0.1" proved="true">
   <proof prover="7"><result status="valid" time="0.007352" steps="43358"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_inversion" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Path_inversion.0" proved="true">
  <proof prover="7"><result status="valid" time="0.003098" steps="3716"/></proof>
  </goal>
  <goal name="Path_inversion.1" proved="true">
  <proof prover="3"><result status="valid" time="0.014168" steps="9679"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Path_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_shortest_path.0" proved="true">
  <transf name="induction" proved="true" arg1="d">
   <goal name="Path_shortest_path.0.0" expl="base case" proved="true">
   <proof prover="8"><result status="valid" time="0.010318" steps="74"/></proof>
   </goal>
   <goal name="Path_shortest_path.0.1" expl="recursive case" proved="true">
   <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="822055"/></proof>
   <proof prover="7" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="11934526"/></proof>
   <proof prover="8" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="22807"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="Path_shortest_path.0.1.0" expl="recursive case" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="Path_shortest_path.0.1.0.0" expl="recursive case" proved="true">
     <proof prover="3"><result status="valid" time="0.058724" steps="25234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="left_extend" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="left_extend.0" proved="true">
  <proof prover="7"><result status="valid" time="0.008059" steps="44908"/></proof>
  </goal>
  <goal name="left_extend.1" proved="true">
  <proof prover="3"><result status="valid" time="0.019952" steps="13441"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="right_extend" proved="true">
 <proof prover="3"><result status="valid" time="0.008797" steps="8294"/></proof>
 </goal>
 <goal name="path_inversion_left">
 <transf name="induction_pr" >
  <goal name="path_inversion_left.0" proved="true">
  <proof prover="3"><result status="valid" time="0.006568" steps="8137"/></proof>
  </goal>
  <goal name="path_inversion_left.1">
  <transf name="introduce_premises" >
   <goal name="path_inversion_left.1.0">
   <transf name="instantiate" arg1="H6" arg2="x, y, d1">
    <goal name="path_inversion_left.1.0.0">
    <transf name="destruct_rec" arg1="Hinst">
     <goal name="path_inversion_left.1.0.0.0" expl="destruct premise">
     <proof prover="3"><undone/></proof>
     <proof prover="7"><undone/></proof>
     <proof prover="8"><undone/></proof>
     </goal>
     <goal name="path_inversion_left.1.0.0.1" expl="destruct premise">
     <proof prover="3"><undone/></proof>
     <proof prover="7"><undone/></proof>
     <proof prover="8"><undone/></proof>
     </goal>
     <goal name="path_inversion_left.1.0.0.2" expl="destruct premise">
     <proof prover="3"><undone/></proof>
     <proof prover="7"><undone/></proof>
     <proof prover="8"><undone/></proof>
     </goal>
     <goal name="path_inversion_left.1.0.0.3">
     <proof prover="3"><undone/></proof>
     <proof prover="7"><undone/></proof>
     <proof prover="8"><undone/></proof>
     </goal>
     <goal name="path_inversion_left.1.0.0.4">
     <proof prover="3"><undone/></proof>
     <proof prover="7"><undone/></proof>
     <proof prover="8"><undone/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="optimal_substructure" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="optimal_substructure.0" proved="true">
  <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="293033"/></proof>
  <proof prover="7" timelimit="1" obsolete="true"><result status="timeout" time="1.028730" steps="4777071"/></proof>
  <proof prover="8" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="7545"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="optimal_substructure.0.0" proved="true">
   <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="1454534"/></proof>
   <proof prover="7" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="10854056"/></proof>
   <proof prover="8" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="24782"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="optimal_substructure.0.0.0" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="optimal_substructure.0.0.0.0" proved="true">
     <proof prover="7"><result status="valid" time="0.022068" steps="101709"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="optimal_substructure.1" proved="true">
  <proof prover="7"><result status="valid" time="0.017139" steps="84424"/></proof>
  </goal>
  <goal name="optimal_substructure.2" proved="true">
  <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="407128"/></proof>
  <proof prover="7" timelimit="1" obsolete="true"><result status="timeout" time="1.024914" steps="4339552"/></proof>
  <proof prover="8" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="7544"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="optimal_substructure.2.0" proved="true">
   <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="1294976"/></proof>
   <proof prover="7" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="9736138"/></proof>
   <proof prover="8" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="25809"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="optimal_substructure.2.0.0" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="optimal_substructure.2.0.0.0" proved="true">
     <proof prover="7"><result status="valid" time="0.016229" steps="85910"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="optimal_substructure.3" proved="true">
  <proof prover="7"><result status="valid" time="0.037681" steps="69960"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_splitting" proved="true">
 <proof prover="3"><result status="valid" time="0.028055" steps="17897"/></proof>
 </goal>
 <goal name="path_splitting_noneq" proved="true">
 <proof prover="3"><result status="valid" time="0.128109" steps="48761"/></proof>
 </goal>
 <goal name="path_merging">
 <transf name="induction_pr" >
  <goal name="path_merging.0" proved="true">
  <proof prover="7"><result status="valid" time="0.009531" steps="3034"/></proof>
  </goal>
  <goal name="path_merging.1">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subpath_optimality_constraint" proved="true">
 <proof prover="7"><result status="valid" time="0.113427" steps="523758"/></proof>
 </goal>
 <goal name="heuristic&#39;vc" expl="VC for heuristic" proved="true">
 <proof prover="3"><result status="valid" time="0.009140" steps="7513"/></proof>
 </goal>
 <goal name="consistent_implies_path_consistent">
 <proof prover="3"><undone/></proof>
 <proof prover="7"><undone/></proof>
 <proof prover="8"><undone/></proof>
 </goal>
 <goal name="consistent_implies_admissible" proved="true">
 <proof prover="7"><result status="valid" time="0.010017" steps="45080"/></proof>
 </goal>
 <goal name="Main_lemma" proved="true">
 <proof prover="3"><result status="valid" time="0.191507" steps="135840"/></proof>
 </goal>
 <goal name="Completeness_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Completeness_lemma.0" proved="true">
  <proof prover="7"><result status="valid" time="0.003669" steps="4773"/></proof>
  </goal>
  <goal name="Completeness_lemma.1" proved="true">
  <proof prover="7"><result status="valid" time="0.009912" steps="65753"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_1" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit_1.0" proved="true">
  <proof prover="7"><result status="valid" time="0.003639" steps="5194"/></proof>
  </goal>
  <goal name="inside_or_exit_1.1" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="inside_or_exit_1.1.0" proved="true">
   <proof prover="3" obsolete="true"><result status="timeout" time="5.000000" steps="2375347"/></proof>
   <proof prover="7" obsolete="true"><result status="timeout" time="5.000000" steps="13831009"/></proof>
   <proof prover="8" obsolete="true"><result status="timeout" time="5.000000" steps="32547"/></proof>
   <transf name="case" proved="true" arg1="((not mem a s) \/ (not mem y s))">
    <goal name="inside_or_exit_1.1.0.0" expl="true case" proved="true">
    <proof prover="3"><result status="valid" time="0.250134" steps="152138"/></proof>
    </goal>
    <goal name="inside_or_exit_1.1.0.1" expl="false case" proved="true">
    <proof prover="3"><result status="valid" time="0.011928" steps="11516"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_2" proved="true">
 <proof prover="7"><result status="valid" time="0.011193" steps="66419"/></proof>
 </goal>
 <goal name="inside_or_exit" proved="true">
 <proof prover="7"><result status="valid" time="0.026825" steps="120490"/></proof>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code">
 <proof prover="3" obsolete="true"><result status="timeout" time="5.000000" steps="1029150"/></proof>
 <proof prover="7" obsolete="true"><result status="timeout" time="5.000000" steps="15998047"/></proof>
 <proof prover="8" obsolete="true"><result status="timeout" time="5.000000" steps="54008"/></proof>
 <transf name="split_vc" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init">
  <transf name="unfold" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code">
   <transf name="split_vc" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.009331" steps="30"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.008934" steps="40"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013374" steps="85466"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.021421" steps="13003"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.012704" steps="83613"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.009881" steps="40"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.011765" steps="75"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.7" expl="VC for shortest_path_code">
    <proof prover="0"><result status="highfailure" time="0.000046"/></proof>
    <proof prover="3"><undone/></proof>
    <proof prover="7"><undone/></proof>
    <proof prover="8"><undone/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.014092" steps="110"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.013351" steps="12284"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.10" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.013475" steps="12046"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.013982" steps="96041"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="8"><result status="valid" time="0.139521" steps="1028"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.003986" steps="5991"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.047016" steps="22354"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="postcondition">
  <proof prover="0"><result status="highfailure" time="0.000050"/></proof>
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="postcondition">
  <transf name="unfold" arg1="post_cond">
   <goal name="shortest_path_code&#39;vc.6.0" expl="VC for shortest_path_code">
   <transf name="split_vc" >
    <goal name="shortest_path_code&#39;vc.6.0.0" expl="VC for shortest_path_code">
    <proof prover="3"><undone/></proof>
    <proof prover="7"><undone/></proof>
    <proof prover="8"><undone/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.0" expl="VC for shortest_path_code">
    <proof prover="3"><undone/></proof>
    <proof prover="7"><undone/></proof>
    <proof prover="8"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.012820" steps="100220"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="loop invariant init">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.016183" steps="22301"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="8"><result status="valid" time="0.020558" steps="216"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010336" steps="13668"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.003807" steps="6867"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.045180" steps="696"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.028483" steps="18019"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.013905" steps="93"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="loop invariant preservation">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.120982" steps="41610"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="loop invariant preservation">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.143643" steps="640118"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.20" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.010610" steps="14205"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.21" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.025246" steps="17124"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.026188" steps="17287"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.003801" steps="6917"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.24" expl="loop invariant preservation">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.013730" steps="107473"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.004744" steps="6964"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.27" expl="loop variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.016972" steps="115901"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.008081" steps="36"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.048424" steps="247036"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.30" expl="loop invariant preservation">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.31" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.028213" steps="147049"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="8"><result status="valid" time="0.010145" steps="20"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.018845" steps="122251"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.34" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="post_cond">
   <goal name="shortest_path_code&#39;vc.34.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.34.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.010315" steps="13162"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.35.0.0" expl="VC for shortest_path_code">
    <proof prover="3"><undone/></proof>
    <proof prover="7"><undone/></proof>
    <proof prover="8"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="consistency_def_eqivelence">
 <transf name="split_vc" >
  <goal name="consistency_def_eqivelence.0">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
  <goal name="consistency_def_eqivelence.1">
  <transf name="unfold" arg1="og_consistent" arg2="in" arg3="H">
   <goal name="consistency_def_eqivelence.1.0">
   <proof prover="3"><undone/></proof>
   <proof prover="7"><undone/></proof>
   <proof prover="8"><undone/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="poop">
 <transf name="exists" arg1="(egs dst)">
  <goal name="poop.0">
  <proof prover="3"><undone/></proof>
  <proof prover="7"><undone/></proof>
  <proof prover="8"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="base_case">
 <proof prover="3"><undone/></proof>
 <proof prover="7"><undone/></proof>
 <proof prover="8"><undone/></proof>
 </goal>
 <goal name="egs&#39;vc" expl="VC for egs">
 <proof prover="3"><undone/></proof>
 <proof prover="7"><undone/></proof>
 <proof prover="8"><undone/></proof>
 </goal>
</theory>
<theory name="Example">
 <goal name="v&#39;vc" expl="VC for v">
 <proof prover="3"><undone/></proof>
 <proof prover="7"><undone/></proof>
 <proof prover="8"><undone/></proof>
 </goal>
 <goal name="test&#39;vc" expl="VC for test">
 <proof prover="3"><undone/></proof>
 <proof prover="7"><undone/></proof>
 <proof prover="8"><undone/></proof>
 </goal>
</theory>
</file>
</why3session>
