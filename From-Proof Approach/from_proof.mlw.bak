module ImpmapNoDom

  use map.Map
  use map.Const

  type key

  type myMap 'a = abstract { mutable contents: map key 'a }

  val function create (x: 'a): myMap 'a
    ensures { result.contents = const x }

  val function ([]) (m: myMap 'a) (k: key): 'a
    ensures { result = m.contents[k] }

  val ghost function ([<-]) (m: myMap 'a) (k: key) (v: 'a): myMap 'a
    ensures { result.contents = m.contents[k <- v] }

  val ([]<-) (m: myMap 'a) (k: key) (v: 'a): unit
    writes { m }
    ensures { m = (old m)[k <- v] }

end


module SubList

  use list.List
  use list.Mem 
  
  type a
  
  function sublist_from (l: list a) (n: a): (list a) =
      match l with
          | Nil -> Nil
          | (Cons x t) as l' -> if x = n then l' else sublist_from t n
      end
      
  lemma not_mem_is_nil:
      forall x: a, l: list a. not (Mem.mem x l) -> is_nil (sublist_from l x)
  
  lemma sublist_from_mem_is_not_nil:
      forall x: a, l: list a. Mem.mem x l -> not is_nil (sublist_from l x)
  
  lemma first_elem_is_x:
      forall x: a, l: list a. Mem.mem x l -> exists y: list a. sublist_from l x = Cons x y
end

module MyGraph

  use export list.List
  use export list.Mem 
  use import set.Fset as Fset
  use export list.Append
  use export list.Distinct
  use export list.HdTlNoOpt
  use export list.Elements
  use export list.Length
  use export int.Int
  

  type node 
  
  clone export SubList with type a = node
  clone ImpmapNoDom with type key = node
  
  constant nodes: fset node 
    
  val ghost function successor (a: node) : fset node
      requires { mem a nodes }
      ensures { subset result nodes }
      ensures { not (mem a result) } 
      
  predicate edge (a b: node) = Fset.mem a nodes /\ Fset.mem b nodes /\ Fset.mem b (successor a)
  
  lemma no_self_edges:
      forall x y: node. Fset.mem x nodes /\ Fset.mem y nodes -> edge x y -> y <> x
  
  inductive path (list node) node node =
  | Path_one:
      forall x: node. Fset.mem x nodes -> path (Cons x Nil) x x
  | Path_cons:
      forall x y z: node, l: list node. edge x y /\ not (Mem.mem x l) /\ path l y z -> path (Cons x l) x z
  
  predicate is_src (src: node) (l: list node) = match l with
      | Nil -> false
      | Cons x _ -> if x = src then true else false
  end
  
  predicate is_dst (dst: node) (l: list node) = match l with
      | Nil -> false
      | Cons x Nil -> if x = dst then true else false
      | Cons _ t -> is_dst dst t
  end
  
  lemma non_mem_lemma:
      forall x y: node, l: list node. not (Mem.mem x (Cons y l)) -> not (Mem.mem x l)
    
  lemma path_one_inversion:
      forall x: node. path (Cons x Nil) x x ->  Fset.mem x nodes 
  
  lemma path_cons_inversion:
      forall x y: node, l: list node. path l x y -> 
          (x = y /\ l = Cons x Nil) \/ 
          (exists z: node, t: list node. l = (Cons x (Cons z t)) /\ 
              edge x z /\ not (Mem.mem x t) /\ not (Mem.mem z t) /\ path (Cons z t) z y)
    
  lemma path_implies_path:
      forall x y z: node, t: list node. path (Cons x (Cons z t)) x y -> 
          path (Cons z t) z y /\ (t = Nil -> z = y)
    
  lemma path_is_subset:
      forall x y z: node, t: list node. path (Cons x (Cons z t)) x y -> 
          not (Mem.mem x t) /\ not (Mem.mem z t) /\ (Mem.mem y t \/ z = y)
          
  lemma simple_path:
      forall  x y: node, l: list node. path l x y -> distinct l /\ Mem.mem x l /\ Mem.mem y l /\ Fset.mem x nodes /\ Fset.mem y nodes
          /\ (forall n: node. Mem.mem n l -> Fset.mem n nodes)
  
  lemma paths_are_a_subset:
      forall x y: node, l: list node. path l x y -> subset (elements l) nodes
  
  lemma cardinal_of_elements_is_length:
      forall l: list node. distinct l -> length l = cardinal (elements l)
  
  lemma paths_not_longer_than_num_nodes:
      forall x y: node, l: list node. path l x y -> length l <= cardinal nodes
      
  lemma path_imples_edge:
      forall x y z: node, t: list node. path (Cons x (Cons z t)) x y -> edge x z
  
  lemma path_imples_path_before:
      forall x y z: node, t: list node. path (Cons x (Cons z t)) x y -> path (Cons z t) z y /\ sublist_from (Cons z t) z = (Cons z t)
  
  lemma path_suffix_exists:
      forall x y z: node, l: list node.
          path (Cons y l) y z -> Mem.mem x l -> let l' = sublist_from l x in path l' x z
 
end 


module PathWeights
  
  clone export MyGraph
  
  val function weight (a b: node) : int
      ensures { result >= 0 }
      ensures { a = b -> result = 0 }
  
  function path_weight (l: list node) : int = match l with
      | Nil -> 0
      | (Cons _ Nil) -> 0
      | (Cons x ((Cons y _) as r)) -> weight x y + path_weight r
  end
  
  lemma positive_path_weight: 
      forall x y: node, l: list node. path l x y -> path_weight l >= 0
  
end 


module GraphsAndOptimalPaths
  
  clone export PathWeights
  
  predicate optimal_path (l: list node) (src dst: node) =
      path l src dst /\ 
      (forall l': list node. path l' src dst -> path_weight l' >= path_weight l)
                  
  lemma optimal_path_is_shortest:
      forall a b: node, l l': list node. 
          optimal_path l a b -> path l' a b -> path_weight l <= path_weight l'
  
  lemma path_existance_implies_optimal_path_existance:
      forall a b: node. exists l : list node. 
          path l a b -> optimal_path l a b \/ (exists l': list node. l <> l' /\ optimal_path l' a b)
  
  lemma path_bounds_optimal:
      forall a b: node, l l': list node. 
          path l a b -> optimal_path l' a b -> path_weight l' <= path_weight l
          
  lemma optimal_paths:
      forall x y z: node, l: list node.
        optimal_path l y z -> edge x y -> not (Mem.mem x l) ->
        path (Cons x l) x z /\ path_weight (Cons x l) - weight x y = path_weight l
  
  lemma subpath_of_optimal_is_optimal:
      forall x y z: node, l: list node. optimal_path (Cons x (Cons y l)) x z -> optimal_path (Cons y l) y z
end 


module Heuristic

  clone export GraphsAndOptimalPaths  
  
  
  val function optimal_h (n dst: node) : int
    requires { Fset.mem n nodes /\ Fset.mem dst nodes }
    ensures { result >= 0 } 
    ensures { forall l: list node. optimal_path l n dst -> result = path_weight l }
  
  val function h (n: node) : int
    requires { Fset.mem n nodes }
    ensures { result >= 0 } 
    
  (*
  predicate admissible (f: node -> int) (dst: node) = 
      forall src: node, l: list node. optimal_path l src dst -> path_weight l >= f src
  *)
  
  predicate admissible (f: node -> int) (dst: node) = 
      forall src: node. f src <= optimal_h src dst
  
  predicate monotonic_acorss_edge (f: node -> int)  (u v: node) = 
      edge u v -> f u <= weight u v + f v
      
  predicate monotonic_acorss_path (f: node -> int)  (l: list node) = 
      match l with
          | Nil -> true
          | Cons _ Nil -> true
          | Cons x ((Cons y _) as t) -> monotonic_acorss_edge f x y /\ monotonic_acorss_path f t
      end
  
  predicate monotonic (f: node -> int) = 
      forall u v: node. monotonic_acorss_edge f u v
  
  lemma weaker_consistancy_across_path :
      forall l: list node. monotonic h -> monotonic_acorss_path h l
  
  lemma consistancy_implies_consistancy_across_path :
      forall src dst: node, l: list node. monotonic h -> path l src dst -> monotonic_acorss_path h l
  
  lemma consistancy_lower_estimate :
      forall src dst: node, l: list node. path l src dst -> h dst = 0 -> monotonic_acorss_path h l -> path_weight l >= h src
  
  lemma consistancy_implies_admissibility:
      forall dst: node. monotonic h -> h dst = 0 -> admissible h dst
  
end


module MyProof

  use int.Int
  use int.Abs
  use ref.Ref
  use list.List
  use option.Option
  use map.Map
  
  
  type node 
  
  clone set.SetImp with type elt = node
  clone ImpmapNoDom with type key = node
  
  constant nodes: fset node 
  
  val function weight (a b: node) : int
    ensures { result >= 0 }
    ensures { a = b -> result = 0 }
    
  val ghost function successor (a: node) : fset node
    requires { mem a nodes }
    ensures { subset result nodes }
  
  val successors node : set
    ensures { subset result nodes }
  
  predicate edge (a b: node) = mem b (successor a)
  
  clone export graph.IntPathWeight with type vertex = node, val weight = weight, predicate edge = edge
  
  predicate accessible (a b: node) = 
    exists l. path a l b
  
  predicate optimal_path (src: node) (steps: list node) (dst: node) = 
    path src steps dst /\
    (forall l: list node. path src l dst -> path_weight l dst >= path_weight steps dst)
  
  lemma LengthNonneg: 
    forall x y: node, l: list node. path x l y -> path_weight l y >= 0
    
  lemma NoShorterPathToSelf:
    forall x: node, l: list node. path x l x -> path_weight l x >= path_weight Nil x
    
  lemma OptimalPathToSelf: 
    forall x: node, l: list node. optimal_path x l x -> path_weight l x = 0
    
  lemma OptimalPathIsShortest:
    forall a b: node, l l': list node. 
      optimal_path a l b -> path a l' b -> path_weight l b <= path_weight l' b
      
  lemma PathBoundsOptimal:
    forall a b: node, l l': list node. 
      path a l b -> optimal_path a l' b -> path_weight l' b <= path_weight l b
  
  lemma PathImpliesOptimalExists:
    forall a b: node. (exists l: list node. path a l b) -> (exists l': list node. optimal_path a l' b)
      
  predicate admissible (f: node -> int) (dst: node) = 
    forall src: node, l: list node. optimal_path src l dst -> path_weight l src >= f src
  
  predicate monotonic (f: node -> int) = 
    forall u v: node. mem v (successor u) ->
      f u <= weight u v + f v
      
  predicate all_positive (f: node -> int) = 
    forall u: node. f u >= 0
  
  val g : myMap int
  
  val ghost function heuristic node : int
  val function h (n: node) : int
    requires { monotonic heuristic }
    requires { all_positive heuristic }
    ensures { result = heuristic n } 
  
  lemma ConsistancyImpliesAdmissibility:
    forall dst: node. admissible h dst
  
  val openSet: set
  val closedSet: set
  
  predicate min (m: node) (q: set) (g: myMap int) (h: node -> int) =
    mem m q /\
    forall x: node. mem x q -> g[m] + h m  <= g[x] + h x
  
  val get_next_node () : node
    writes { openSet, closedSet }
    ensures { min result (old openSet) g h }
    ensures { openSet = remove result (old openSet) }
    ensures { closedSet = add result (old closedSet) } 
    
  val init (src: node) : unit 
    writes { openSet, closedSet, g}
    ensures { openSet = singleton src }
    ensures { is_empty closedSet }
    ensures { g = (old g)[src <- 0] }
  
  let a_star_search (src dst: node) : option (list node) =
    requires { mem src nodes }
    requires { mem dst nodes }
    requires { h dst = 0 }
    ensures { result = None -> forall x. not (path src x dst) }
    ensures { forall l: list node. result = Some l -> optimal_path src l dst } 
    init src;
    let result = ref None in
    while not (is_empty openSet) do
      variant { cardinal nodes - cardinal closedSet }
      let current = get_next_node () in
      if eq current dst then result := None else
        let neighbours = successors current in 
        while not (is_empty neighbours) do
          variant { cardinal neighbours }
          let neighbour = choose_and_remove neighbours in 
          if not (mem neighbour closedSet) then add neighbour openSet
        done
    done;
    !result
end
