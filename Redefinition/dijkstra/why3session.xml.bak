<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<file format="whyml">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="GraphDef" proved="true">
 <goal name="path_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_nonneg.0" proved="true">
  </goal>
  <goal name="path_nonneg.1" proved="true">
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_nonneg" proved="true">
 </goal>
 <goal name="shortest_path_decomposition" proved="true">
 <transf name="unfold" proved="true" arg1="shortest_path">
  <goal name="shortest_path_decomposition.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_decomposition.0.0" proved="true">
   </goal>
   <goal name="shortest_path_decomposition.0.1" proved="true">
   </goal>
   <goal name="shortest_path_decomposition.0.2" proved="true">
   </goal>
   <goal name="shortest_path_decomposition.0.3" proved="true">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_negation" proved="true">
 </goal>
 <goal name="path_weight_sub_path" proved="true">
 </goal>
 <goal name="optimal_substructure_property" proved="true">
 </goal>
 <goal name="sub_path" proved="true">
 </goal>
 <goal name="sub_path_inversion" proved="true">
 </goal>
 <goal name="inside_or_exit_path" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit_path.0" proved="true">
  </goal>
  <goal name="inside_or_exit_path.1" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="inside_or_exit_path.1.0" proved="true">
   <transf name="case" proved="true" arg1="(mem y s)">
    <goal name="inside_or_exit_path.1.0.0" expl="true case" proved="true">
    </goal>
    <goal name="inside_or_exit_path.1.0.1" expl="false case" proved="true">
    <transf name="exists" proved="true" arg1="src">
     <goal name="inside_or_exit_path.1.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="y">
      <goal name="inside_or_exit_path.1.0.1.0.0" proved="true">
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="inside_or_exit_shortest_path.0" proved="true">
  <transf name="instantiate" proved="true" arg1="inside_or_exit_path" arg2="s, src, v, l">
   <goal name="inside_or_exit_shortest_path.0.0" proved="true">
   <transf name="destruct_rec" proved="true" arg1="Hinst">
    <goal name="inside_or_exit_shortest_path.0.0.0" expl="destruct premise" proved="true">
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.1" expl="destruct premise" proved="true">
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.2" expl="destruct premise" proved="true">
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.3" proved="true">
    <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, y, v, l1, l2">
     <goal name="inside_or_exit_shortest_path.0.0.3.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Hinst">
      <goal name="inside_or_exit_shortest_path.0.0.3.0.0" expl="destruct premise" proved="true">
      </goal>
      <goal name="inside_or_exit_shortest_path.0.0.3.0.1" proved="true">
      <transf name="exists" proved="true" arg1="y">
       <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0" proved="true">
       <transf name="exists" proved="true" arg1="z">
        <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0" proved="true">
        <transf name="exists" proved="true" arg1="l1">
         <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l2">
          <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.0" proved="true">
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.1" proved="true">
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.2" proved="true">
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.3" proved="true">
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4" proved="true">
           <transf name="case" proved="true" arg1="(shortest_path z l2 v)">
            <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.0" expl="true case" proved="true">
            </goal>
            <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1" expl="false case" proved="true">
            <transf name="instantiate" proved="true" arg1="shortest_path_negation" arg2="z,v,l2">
             <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0" expl="false case" proved="true">
             <transf name="destruct_rec" proved="true" arg1="Hinst">
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.0" expl="destruct premise" proved="true">
              </goal>
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.1" expl="false case" proved="true">
              </goal>
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2" expl="false case" proved="true">
              <transf name="assert" proved="true" arg1="(shortest_path y (Cons y l&#39;) v)">
               <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2.0" expl="asserted formula" proved="true">
               </goal>
               <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2.1" expl="false case" proved="true">
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.5" proved="true">
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_imples_exists_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="path_imples_exists_shortest_path.0" proved="true">
  <transf name="assert" proved="true" arg1="(path_existance a b)">
   <goal name="path_imples_exists_shortest_path.0.0" expl="asserted formula" proved="true">
   </goal>
   <goal name="path_imples_exists_shortest_path.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="path_existance" arg2="in" arg3="h">
    <goal name="path_imples_exists_shortest_path.0.1.0" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="path_imples_exists_shortest_path.0.1.0.0" proved="true">
     <transf name="induction" proved="true" arg1="d">
      <goal name="path_imples_exists_shortest_path.0.1.0.0.0" expl="base case" proved="true">
      </goal>
      <goal name="path_imples_exists_shortest_path.0.1.0.0.1" expl="recursive case" proved="true">
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_zero" proved="true">
 </goal>
 <goal name="main_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="main_lemma.0" proved="true">
  <transf name="induction_arg_pr" proved="true" arg1="H1">
   <goal name="main_lemma.0.0" proved="true">
   </goal>
   <goal name="main_lemma.0.1" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main_lemma.0.1.0" proved="true">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="completeness_lemma" proved="true">
 </goal>
 <goal name="consistent_implies_admissible" proved="true">
 <transf name="unfold" proved="true" arg1="admissible">
  <goal name="consistent_implies_admissible.0" proved="true">
  <transf name="induction_pr" proved="true" >
   <goal name="consistent_implies_admissible.0.0" proved="true">
   </goal>
   <goal name="consistent_implies_admissible.0.1" proved="true">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="consistent_is_path_consistent" proved="true">
 <transf name="unfold" proved="true" arg1="path_consistent">
  <goal name="consistent_is_path_consistent.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="consistent_is_path_consistent.0.0" proved="true">
   </goal>
   <goal name="consistent_is_path_consistent.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(forall a, b, l. path a l b -&gt; f a &lt;= path_weight l b + f b)">
    <goal name="consistent_is_path_consistent.0.1.0" expl="asserted formula" proved="true">
    <transf name="induction_pr" proved="true" >
     <goal name="consistent_is_path_consistent.0.1.0.0" expl="asserted formula" proved="true">
     </goal>
     <goal name="consistent_is_path_consistent.0.1.0.1" expl="asserted formula" proved="true">
     </goal>
    </transf>
    </goal>
    <goal name="consistent_is_path_consistent.0.1.1" proved="true">
    </goal>
   </transf>
   </goal>
   <goal name="consistent_is_path_consistent.0.2" proved="true">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.7" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.8" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.9" expl="VC for shortest_path_code" proved="true">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(exists k. shortest_path_with_len src u k)">
   <goal name="shortest_path_code&#39;vc.4.0" expl="asserted formula" proved="true">
   </goal>
   <goal name="shortest_path_code&#39;vc.4.1" expl="assertion" proved="true">
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="assertion" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="postcondition" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="loop invariant init" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="loop invariant init" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="precondition" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="assertion" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="loop variant decrease" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.14.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.14.0.0" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.1" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.2" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.3" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.4" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.5" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.6" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="case" proved="true" arg1="(n = y)">
     <goal name="shortest_path_code&#39;vc.14.0.7.0" expl="true case" proved="true">
     <transf name="assert" proved="true" arg1="(path_with_len src u d[u])">
      <goal name="shortest_path_code&#39;vc.14.0.7.0.0" expl="asserted formula" proved="true">
      </goal>
      <goal name="shortest_path_code&#39;vc.14.0.7.0.1" expl="true case" proved="true">
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.14.0.7.1" expl="false case" proved="true">
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.8" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.9" expl="VC for shortest_path_code" proved="true">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="assertion" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop variant decrease" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.20" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.21" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(shortest_path_with_len src y d[y])">
   <goal name="shortest_path_code&#39;vc.21.0" expl="asserted formula" proved="true">
   </goal>
   <goal name="shortest_path_code&#39;vc.21.1" expl="assertion" proved="true">
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.22" expl="loop variant decrease" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.23" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.24" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.24.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.24.0.0" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.1" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.2" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.3" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.4" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.5" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.6" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.7" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.8" expl="VC for shortest_path_code" proved="true">
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.9" expl="VC for shortest_path_code" proved="true">
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.25" expl="loop invariant preservation" proved="true">
  <transf name="assert" proved="true" arg1="(shortest_path_with_len src y d[y])">
   <goal name="shortest_path_code&#39;vc.25.0" expl="asserted formula" proved="true">
   </goal>
   <goal name="shortest_path_code&#39;vc.25.1" expl="loop invariant preservation" proved="true">
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.26" expl="assertion" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.27" expl="loop variant decrease" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.28" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.29" expl="loop invariant preservation" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.30" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(mem src open)">
   <goal name="shortest_path_code&#39;vc.30.0" expl="true case (loop invariant preservation)" proved="true">
   </goal>
   <goal name="shortest_path_code&#39;vc.30.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="inside_or_exit_shortest_path" arg2="(closed.to_fset), src, n, l">
    <goal name="shortest_path_code&#39;vc.30.1.0" expl="false case (loop invariant preservation)" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Hinst">
     <goal name="shortest_path_code&#39;vc.30.1.0.0" expl="destruct premise" proved="true">
     <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant7">
      <goal name="shortest_path_code&#39;vc.30.1.0.0.0" expl="destruct premise" proved="true">
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.30.1.0.1" expl="destruct premise" proved="true">
     </goal>
     <goal name="shortest_path_code&#39;vc.30.1.0.2" expl="destruct premise" proved="true">
     </goal>
     <goal name="shortest_path_code&#39;vc.30.1.0.3" expl="false case (loop invariant preservation)" proved="true">
     <transf name="unfold" proved="true" arg1="inv_succ" arg2="in" arg3="LoopInvariant">
      <goal name="shortest_path_code&#39;vc.30.1.0.3.0" expl="false case (loop invariant preservation)" proved="true">
      <transf name="inst_rem" proved="true" arg1="LoopInvariant" arg2="y">
       <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0" expl="false case (loop invariant preservation)" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.0" expl="destruct premise" proved="true">
        </goal>
        <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <transf name="inst_rem" proved="true" arg1="Hinst" arg2="z">
         <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0" expl="false case (loop invariant preservation)" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.0" expl="destruct premise" proved="true">
          </goal>
          <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1" expl="false case (loop invariant preservation)" proved="true">
          <transf name="assert" proved="true" arg1="(shortest_path src (l1 ++ Cons y Nil) z)">
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0" expl="asserted formula" proved="true">
           <transf name="case" proved="true" arg1="(l2 = Nil)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.0" expl="asserted formula (true case)" proved="true">
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1" expl="asserted formula (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(exists l2&#39;. l2 = Cons z l2&#39;)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1" expl="asserted formula (false case)" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0" expl="asserted formula (false case)" proved="true">
              <transf name="assert" proved="true" arg1="(l = (l1 ++ Cons y Nil) ++ (Cons z l2&#39;))">
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0.0" expl="asserted formula" proved="true">
               </goal>
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0.1" expl="asserted formula (false case)" proved="true">
               <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, z, n, (l1 ++ (Cons y Nil)), l2&#39;">
                <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0.1.0" expl="asserted formula (false case)" proved="true">
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1" expl="false case (loop invariant preservation)" proved="true">
           <transf name="assert" proved="true" arg1="(d[z] &gt;= path_weight (l1 ++ Cons y Nil) z)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1" expl="false case (loop invariant preservation)" proved="true">
            <transf name="assert" proved="true" arg1="(d[y] + weight y z = path_weight (l1 ++ Cons y Nil) z)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(d[y] = path_weight l1 y)">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.0.0" expl="asserted formula" proved="true">
              </goal>
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.0.1" expl="asserted formula" proved="true">
              </goal>
             </transf>
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.1" expl="false case (loop invariant preservation)" proved="true">
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2" expl="false case (loop invariant preservation)" proved="true">
          <transf name="assert" proved="true" arg1="(shortest_path src (l1 ++ Cons y Nil) z)">
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0" expl="asserted formula" proved="true">
           <transf name="case" proved="true" arg1="(l2 = Nil)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.0" expl="asserted formula (true case)" proved="true">
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1" expl="asserted formula (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(exists l2&#39;. l2 = Cons z l2&#39;)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.0" expl="asserted formula" proved="true">
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1" expl="asserted formula (false case)" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0" expl="asserted formula (false case)" proved="true">
              <transf name="assert" proved="true" arg1="(l = (l1 ++ Cons y Nil) ++ (Cons z l2&#39;))">
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0.0" expl="asserted formula" proved="true">
               </goal>
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0.1" expl="asserted formula (false case)" proved="true">
               <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, z, n, (l1 ++ (Cons y Nil)), l2&#39;">
                <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0.1.0" expl="asserted formula (false case)" proved="true">
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1" expl="false case (loop invariant preservation)" proved="true">
           <transf name="assert" proved="true" arg1="(d[z] &gt;= path_weight (l1 ++ Cons y Nil) z)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.0" expl="asserted formula" proved="true">
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1" expl="false case (loop invariant preservation)" proved="true">
            <transf name="assert" proved="true" arg1="(d[y] + weight y z = path_weight (l1 ++ Cons y Nil) z)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(d[y] = path_weight l1 y)">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0" expl="asserted formula" proved="true">
              <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0" expl="asserted formula" proved="true">
               <transf name="split_premise_full" proved="true" >
                <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="inst_rem" proved="true" arg1="LoopInvariant6" arg2="y">
                 <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="Hinst">
                  <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                  </goal>
                  <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.1" expl="asserted formula" proved="true">
              </goal>
             </transf>
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.1" expl="false case (loop invariant preservation)" proved="true">
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.31" expl="assertion" proved="true">
  </goal>
  <goal name="shortest_path_code&#39;vc.32" expl="postcondition" proved="true">
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
