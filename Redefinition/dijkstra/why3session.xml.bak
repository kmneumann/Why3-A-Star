<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Eprover" version="2.0" alternative="alt" timelimit="20" steplimit="0" memlimit="1000"/>
<prover id="1" name="Eprover" version="2.0" timelimit="20" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC5" version="1.1.0" alternative="strings" timelimit="20" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.15.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="GraphDef">
 <goal name="path_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_nonneg.0" proved="true">
  <proof prover="3"><result status="valid" time="0.010807" steps="8788"/></proof>
  </goal>
  <goal name="path_nonneg.1" proved="true">
  <proof prover="8"><result status="valid" time="0.016730" steps="204"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_nonneg" proved="true">
 <proof prover="7"><result status="valid" time="0.007807" steps="42077"/></proof>
 </goal>
 <goal name="shortest_path_decomposition" proved="true">
 <transf name="unfold" proved="true" arg1="shortest_path">
  <goal name="shortest_path_decomposition.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_decomposition.0.0" proved="true">
   <proof prover="7"><result status="valid" time="0.008774" steps="44011"/></proof>
   </goal>
   <goal name="shortest_path_decomposition.0.1" proved="true">
   <proof prover="3"><result status="valid" time="0.574289" steps="160833"/></proof>
   <proof prover="7"><result status="timeout" time="5.000000" steps="9782425"/></proof>
   <proof prover="8"><result status="timeout" time="5.000000" steps="71585"/></proof>
   </goal>
   <goal name="shortest_path_decomposition.0.2" proved="true">
   <proof prover="3"><result status="valid" time="0.015176" steps="8891"/></proof>
   </goal>
   <goal name="shortest_path_decomposition.0.3" proved="true">
   <proof prover="3"><result status="valid" time="0.140469" steps="47938"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_negation" proved="true">
 <proof prover="3"><result status="valid" time="0.014684" steps="9070"/></proof>
 </goal>
 <goal name="path_weight_sub_path" proved="true">
 <proof prover="8"><result status="valid" time="0.009408" steps="48"/></proof>
 </goal>
 <goal name="optimal_substructure_property" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="optimal_substructure_property.0" proved="true">
  <transf name="assert" proved="true" arg1="(shortest_path s (l1 ++ Cons a l_ab) b /\ shortest_path b (Cons b l2) t)">
   <goal name="optimal_substructure_property.0.0" expl="asserted formula" proved="true">
   <proof prover="8"><result status="valid" time="0.006795" steps="12"/></proof>
   </goal>
   <goal name="optimal_substructure_property.0.1" proved="true">
   <proof prover="3"><result status="valid" time="0.011306" steps="9193"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sub_path" proved="true">
 <proof prover="3"><result status="valid" time="0.030837" steps="15998"/></proof>
 </goal>
 <goal name="sub_path_inversion" proved="true">
 <proof prover="7"><result status="valid" time="0.009441" steps="51703"/></proof>
 </goal>
 <goal name="inside_or_exit_path" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit_path.0" proved="true">
  <proof prover="3"><result status="valid" time="0.010050" steps="11208"/></proof>
  </goal>
  <goal name="inside_or_exit_path.1" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="inside_or_exit_path.1.0" proved="true">
   <transf name="case" proved="true" arg1="(mem y s)">
    <goal name="inside_or_exit_path.1.0.0" expl="true case" proved="true">
    <proof prover="8"><result status="valid" time="0.042078" steps="485"/></proof>
    </goal>
    <goal name="inside_or_exit_path.1.0.1" expl="false case" proved="true">
    <transf name="exists" proved="true" arg1="src">
     <goal name="inside_or_exit_path.1.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="y">
      <goal name="inside_or_exit_path.1.0.1.0.0" proved="true">
      <proof prover="3"><result status="valid" time="3.528705" steps="507469"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="inside_or_exit_shortest_path.0" proved="true">
  <transf name="instantiate" proved="true" arg1="inside_or_exit_path" arg2="s, src, v, l">
   <goal name="inside_or_exit_shortest_path.0.0" proved="true">
   <transf name="destruct_rec" proved="true" arg1="Hinst">
    <goal name="inside_or_exit_shortest_path.0.0.0" expl="destruct premise" proved="true">
    <proof prover="8"><result status="valid" time="0.005875" steps="6"/></proof>
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.1" expl="destruct premise" proved="true">
    <proof prover="7"><result status="valid" time="0.009421" steps="63717"/></proof>
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.2" expl="destruct premise" proved="true">
    <proof prover="7"><result status="valid" time="0.003481" steps="5151"/></proof>
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.3" proved="true">
    <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, y, v, l1, l2">
     <goal name="inside_or_exit_shortest_path.0.0.3.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Hinst">
      <goal name="inside_or_exit_shortest_path.0.0.3.0.0" expl="destruct premise" proved="true">
      <proof prover="8"><result status="valid" time="0.006344" steps="18"/></proof>
      </goal>
      <goal name="inside_or_exit_shortest_path.0.0.3.0.1" proved="true">
      <transf name="exists" proved="true" arg1="y">
       <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0" proved="true">
       <transf name="exists" proved="true" arg1="z">
        <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0" proved="true">
        <transf name="exists" proved="true" arg1="l1">
         <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l2">
          <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.0" proved="true">
           <proof prover="7"><result status="valid" time="0.003787" steps="5227"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.1" proved="true">
           <proof prover="7"><result status="valid" time="0.003429" steps="5229"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.2" proved="true">
           <proof prover="8"><result status="valid" time="0.006433" steps="22"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.3" proved="true">
           <proof prover="7"><result status="valid" time="0.003676" steps="5227"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4" proved="true">
           <transf name="case" proved="true" arg1="(shortest_path z l2 v)">
            <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.0" expl="true case" proved="true">
            <proof prover="8"><result status="valid" time="0.006554" steps="24"/></proof>
            </goal>
            <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1" expl="false case" proved="true">
            <transf name="instantiate" proved="true" arg1="shortest_path_negation" arg2="z,v,l2">
             <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0" expl="false case" proved="true">
             <transf name="destruct_rec" proved="true" arg1="Hinst">
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.0" expl="destruct premise" proved="true">
              <proof prover="7"><result status="valid" time="0.003565" steps="5238"/></proof>
              </goal>
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.1" expl="false case" proved="true">
              <proof prover="8"><result status="valid" time="0.008223" steps="24"/></proof>
              </goal>
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2" expl="false case" proved="true">
              <transf name="assert" proved="true" arg1="(shortest_path y (Cons y l&#39;) v)">
               <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2.0" expl="asserted formula" proved="true">
               <proof prover="3"><result status="valid" time="0.381463" steps="124221"/></proof>
               <proof prover="8"><result status="valid" time="0.071373" steps="848"/></proof>
               </goal>
               <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2.1" expl="false case" proved="true">
               <proof prover="3"><result status="valid" time="0.096283" steps="37367"/></proof>
               <proof prover="8"><result status="valid" time="0.092211" steps="1067"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.5" proved="true">
           <proof prover="8"><result status="valid" time="0.006074" steps="22"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_imples_exists_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="path_imples_exists_shortest_path.0" proved="true">
  <transf name="assert" proved="true" arg1="(path_existance a b)">
   <goal name="path_imples_exists_shortest_path.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.010249" steps="9163"/></proof>
   </goal>
   <goal name="path_imples_exists_shortest_path.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="path_existance" arg2="in" arg3="h">
    <goal name="path_imples_exists_shortest_path.0.1.0" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="path_imples_exists_shortest_path.0.1.0.0" proved="true">
     <transf name="induction" proved="true" arg1="d">
      <goal name="path_imples_exists_shortest_path.0.1.0.0.0" expl="base case" proved="true">
      <proof prover="8"><result status="valid" time="0.017643" steps="118"/></proof>
      </goal>
      <goal name="path_imples_exists_shortest_path.0.1.0.0.1" expl="recursive case" proved="true">
      <proof prover="3"><result status="valid" time="0.024273" steps="17247"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_zero" proved="true">
 <proof prover="8"><result status="valid" time="0.021131" steps="184"/></proof>
 </goal>
 <goal name="main_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="main_lemma.0" proved="true">
  <proof prover="8"><result status="valid" time="0.011488" steps="44"/></proof>
  </goal>
  <goal name="main_lemma.1" proved="true">
  <proof prover="1" timelimit="1"><result status="highfailure" time="0.000049"/></proof>
  <proof prover="2"><result status="timeout" time="20.000000" steps="1980166"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="252979"/></proof>
  <proof prover="7" timelimit="1"><result status="timeout" time="1.000000" steps="3818430"/></proof>
  <proof prover="8" timelimit="1"><result status="timeout" time="1.000000" steps="9718"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="main_lemma.1.0" proved="true">
   <proof prover="3" timelimit="10" memlimit="4000"><result status="valid" time="5.410049" steps="940810"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="completeness_lemma" proved="true">
 <proof prover="7"><result status="valid" time="0.012695" steps="78557"/></proof>
 </goal>
 <goal name="consistent_implies_admissible" proved="true">
 <transf name="unfold" proved="true" arg1="consistent">
  <goal name="consistent_implies_admissible.0" proved="true">
  <transf name="unfold" proved="true" arg1="admissible">
   <goal name="consistent_implies_admissible.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="consistent_implies_admissible.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(forall a, b, l. path a l b -&gt; f a &lt;= path_weight l b + f b)">
     <goal name="consistent_implies_admissible.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="induction_pr" proved="true" >
      <goal name="consistent_implies_admissible.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.014247" steps="11341"/></proof>
      </goal>
      <goal name="consistent_implies_admissible.0.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.023131" steps="14389"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="consistent_implies_admissible.0.0.0.1" proved="true">
     <proof prover="7"><result status="valid" time="0.009836" steps="59263"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="consistent_implies_path_consistent" proved="true">
 <transf name="unfold" proved="true" arg1="path_consistent">
  <goal name="consistent_implies_path_consistent.0" proved="true">
  <transf name="unfold" proved="true" arg1="consistent">
   <goal name="consistent_implies_path_consistent.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="consistent_implies_path_consistent.0.0.0" proved="true">
    <proof prover="7"><result status="valid" time="0.003711" steps="4836"/></proof>
    </goal>
    <goal name="consistent_implies_path_consistent.0.0.1" proved="true">
    <transf name="assert" proved="true" arg1="(forall a, b, l. path a l b -&gt; f a &lt;= path_weight l b + f b)">
     <goal name="consistent_implies_path_consistent.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="induction_pr" proved="true" >
      <goal name="consistent_implies_path_consistent.0.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="0.009136" steps="27"/></proof>
      </goal>
      <goal name="consistent_implies_path_consistent.0.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.021235" steps="14629"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="consistent_implies_path_consistent.0.0.1.1" proved="true">
     <proof prover="7"><result status="valid" time="0.010020" steps="61947"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code">
 <transf name="split_vc" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.021873" steps="13671"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.009660" steps="54"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.013985" steps="12845"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.017534" steps="96713"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014148" steps="100676"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.023103" steps="13851"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.015605" steps="13078"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.270910"/></proof>
    <proof prover="3"><result status="timeout" time="5.000000" steps="520228"/></proof>
    <proof prover="7"><result status="timeout" time="5.000000" steps="16157164"/></proof>
    <proof prover="8"><result status="timeout" time="5.000000" steps="113015"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.055895" steps="89342"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.013881" steps="12879"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.025231" steps="15194"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.562309" steps="160033"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.004087" steps="6713"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(exists k. shortest_path_with_len src u k)">
   <goal name="shortest_path_code&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="0" obsolete="true"><result status="valid" time="0.434749"/></proof>
   <proof prover="1"><result status="valid" time="0.561997"/></proof>
   <proof prover="3"><result status="timeout" time="5.000000" steps="292362"/></proof>
   <proof prover="7"><result status="timeout" time="5.000000" steps="18358929"/></proof>
   <proof prover="8"><result status="timeout" time="5.000000" steps="55675"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.4.1" expl="assertion" proved="true">
   <transf name="destruct_rec" proved="true" arg1="h">
    <goal name="shortest_path_code&#39;vc.4.1.0" expl="assertion" proved="true">
    <transf name="case" proved="true" arg1="(d[u] &gt; k)">
     <goal name="shortest_path_code&#39;vc.4.1.0.0" expl="true case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(not shortest_path_with_len src u d[u])">
      <goal name="shortest_path_code&#39;vc.4.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.043220" steps="234418"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.4.1.0.0.1" expl="true case (assertion)" proved="true">
      <transf name="inst_rem" proved="true" arg1="LoopInvariant" arg2="u, k">
       <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0" expl="true case (assertion)" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.0" expl="destruct premise" proved="true">
        <proof prover="8"><result status="valid" time="0.008652" steps="32"/></proof>
        </goal>
        <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.1" expl="destruct premise" proved="true">
        <proof prover="7"><result status="valid" time="0.022458" steps="133820"/></proof>
        </goal>
        <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2" expl="true case (assertion)" proved="true">
        <transf name="case" proved="true" arg1="(u = u1)">
         <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.0" expl="true case (assertion)" proved="true">
         <proof prover="7"><result status="valid" time="0.005128" steps="20962"/></proof>
         </goal>
         <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1" expl="false case (true case. assertion)" proved="true">
         <transf name="assert" proved="true" arg1="(d[u1] + h4 u1 &gt; d[u] + h4 u)">
          <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(d[u1] &gt; d[u] + (k - d[u]))">
           <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.0" expl="asserted formula" proved="true">
           <proof prover="7"><result status="valid" time="0.004171" steps="6785"/></proof>
           </goal>
           <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(d[u1] + h6 u1 &gt; d[u] + (k - d[u]) + h6 u1)">
            <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1.0" expl="asserted formula" proved="true">
            <proof prover="7"><result status="valid" time="0.004016" steps="6812"/></proof>
            </goal>
            <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1.1" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(h7 u &lt;= (k - d[u]) + h7 u1)">
             <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(path_consistent h7 dst)">
              <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1.1.0.0" expl="asserted formula" proved="true">
              <proof prover="7"><result status="valid" time="0.013524" steps="101227"/></proof>
              </goal>
              <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1.1.0.1" expl="asserted formula" proved="true">
              <proof prover="7"><result status="valid" time="0.050159" steps="270646"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.0.1.1.1" expl="asserted formula" proved="true">
             <proof prover="8"><result status="valid" time="0.009745" steps="44"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shortest_path_code&#39;vc.4.1.0.0.1.0.2.1.1" expl="false case (true case. assertion)" proved="true">
          <proof prover="7"><result status="valid" time="0.022829" steps="134153"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.4.1.0.1" expl="false case (assertion)" proved="true">
     <proof prover="8"><result status="valid" time="0.135485" steps="1698"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.005151" steps="20735"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.017002" steps="14920"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.7.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.7.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.021880" steps="22822"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.015713" steps="110965"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014852" steps="116342"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.046381" steps="22900"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.028451" steps="16881"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.023305" steps="24000"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.017291" steps="117521"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.051032" steps="248180"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.011703" steps="324239"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.021169" steps="224"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.043437" steps="24698"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.004026" steps="7511"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.033095" steps="19118"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="loop variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.020571" steps="135449"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.015488" steps="88"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.13.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.13.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.13.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.018983" steps="148076"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.044103" steps="264068"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.014241" steps="18648"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.004798" steps="9730"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.025599" steps="172820"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.026023" steps="176486"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.6" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.047610" steps="280235"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.7" expl="VC for shortest_path_code" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="shortest_path_code&#39;vc.13.0.0.7.0" expl="VC for shortest_path_code" proved="true">
      <transf name="case" proved="true" arg1="(n = y)">
       <goal name="shortest_path_code&#39;vc.13.0.0.7.0.0" expl="true case" proved="true">
       <proof prover="3"><result status="valid" time="2.562098" steps="504985"/></proof>
       </goal>
       <goal name="shortest_path_code&#39;vc.13.0.0.7.0.1" expl="false case" proved="true">
       <proof prover="3"><result status="valid" time="0.079625" steps="36862"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.8" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.047993" steps="280231"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.9" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.774918" steps="160283"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.13.0.0.10" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.020455" steps="148894"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.285442" steps="78348"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.034626" steps="19878"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="loop variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.020211" steps="136466"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.014053" steps="92"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.18.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.18.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.18.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.019228" steps="148741"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.750157" steps="141146"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.004677" steps="9762"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.004996" steps="9760"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.045762" steps="25034"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.020334" steps="148702"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.6" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.045794" steps="278108"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.7" expl="VC for shortest_path_code" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="shortest_path_code&#39;vc.18.0.0.7.0" expl="VC for shortest_path_code" proved="true">
      <transf name="case" proved="true" arg1="(n = y)">
       <goal name="shortest_path_code&#39;vc.18.0.0.7.0.0" expl="true case" proved="true">
       <transf name="assert" proved="true" arg1="(path_with_len src u d[u])">
        <goal name="shortest_path_code&#39;vc.18.0.0.7.0.0.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.040403" steps="24496"/></proof>
        </goal>
        <goal name="shortest_path_code&#39;vc.18.0.0.7.0.0.1" expl="true case" proved="true">
        <proof prover="3"><result status="valid" time="1.544006" steps="330161"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="shortest_path_code&#39;vc.18.0.0.7.0.1" expl="false case" proved="true">
       <proof prover="7"><result status="valid" time="0.045405" steps="273198"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.8" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.045138" steps="278104"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.9" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.912421" steps="186343"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.18.0.0.10" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.040663" steps="24002"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.252041" steps="76327"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.20" expl="assertion" proved="true">
  <transf name="simplify_formula" proved="true" >
   <goal name="shortest_path_code&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant1">
    <goal name="shortest_path_code&#39;vc.20.0.0" expl="assertion" proved="true">
    <transf name="split_premise_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.20.0.0.0" expl="assertion" proved="true">
     <proof prover="7"><result status="valid" time="0.004778" steps="9674"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.21" expl="loop variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.018722" steps="134727"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.018548" steps="132047"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.23" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.23.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.23.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.015031" steps="117135"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.029766" steps="19022"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014958" steps="117186"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014961" steps="117174"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013911" steps="69"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.030411" steps="19097"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.074018" steps="132836"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H">
     <goal name="shortest_path_code&#39;vc.23.0.7.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.073712" steps="133023"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.23.0.7.1" expl="VC for shortest_path_code" proved="true">
     <transf name="case" proved="true" arg1="(n = y)">
      <goal name="shortest_path_code&#39;vc.23.0.7.1.0" expl="true case" proved="true">
      <transf name="assert" proved="true" arg1="(d1[u] = d[u])">
       <goal name="shortest_path_code&#39;vc.23.0.7.1.0.0" expl="asserted formula" proved="true">
       <proof prover="7"><result status="valid" time="0.031000" steps="23641"/></proof>
       </goal>
       <goal name="shortest_path_code&#39;vc.23.0.7.1.0.1" expl="true case" proved="true">
       <transf name="assert" proved="true" arg1="(path_with_len src u d[u])">
        <goal name="shortest_path_code&#39;vc.23.0.7.1.0.1.0" expl="asserted formula" proved="true">
        <proof prover="7"><result status="valid" time="0.031087" steps="23673"/></proof>
        </goal>
        <goal name="shortest_path_code&#39;vc.23.0.7.1.0.1.1" expl="true case" proved="true">
        <transf name="unfold" proved="true" arg1="path_with_len" arg2="in" arg3="h">
         <goal name="shortest_path_code&#39;vc.23.0.7.1.0.1.1.0" expl="true case" proved="true">
         <transf name="destruct_rec" proved="true" arg1="h">
          <goal name="shortest_path_code&#39;vc.23.0.7.1.0.1.1.0.0" expl="true case" proved="true">
          <proof prover="7"><result status="valid" time="0.005360" steps="23757"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="shortest_path_code&#39;vc.23.0.7.1.1" expl="false case" proved="true">
      <proof prover="3"><result status="valid" time="0.037394" steps="20880"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.027528" steps="189843"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.23.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.018819" steps="133041"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.24" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="shortest_path_code&#39;vc.24.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv_succ2" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.24.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.24.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.022392" steps="19209"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.24.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.020745" steps="19283"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.24.0.0.2" expl="VC for shortest_path_code" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="shortest_path_code&#39;vc.24.0.0.2.0" expl="VC for shortest_path_code" proved="true">
      <transf name="case" proved="true" arg1="(y = y1)">
       <goal name="shortest_path_code&#39;vc.24.0.0.2.0.0" expl="true case" proved="true">
       <transf name="assert" proved="true" arg1="(mem y open)">
        <goal name="shortest_path_code&#39;vc.24.0.0.2.0.0.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.019932" steps="19420"/></proof>
        </goal>
        <goal name="shortest_path_code&#39;vc.24.0.0.2.0.0.1" expl="true case" proved="true">
        <proof prover="3"><result status="valid" time="0.013901" steps="18724"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="shortest_path_code&#39;vc.24.0.0.2.0.1" expl="false case" proved="true">
       <proof prover="7"><result status="valid" time="0.020775" steps="152375"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.24.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="8"><result status="valid" time="0.038686" steps="510"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.25" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(path_with_len src u d[u])">
   <goal name="shortest_path_code&#39;vc.25.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="0.030868" steps="185596"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.25.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(path_with_len src y (d[u] + weight u y))">
    <goal name="shortest_path_code&#39;vc.25.1.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.625957" steps="200546"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.25.1.1" expl="assertion" proved="true">
    <proof prover="7"><result status="valid" time="0.365037" steps="1657820"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.26" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.029240" steps="18393"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.029520" steps="18629"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.009549" steps="54"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.29" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="shortest_path_code&#39;vc.29.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv_succ2" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.29.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.29.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.031499" steps="19925"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.29.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.031948" steps="19309"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.30" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.053298" steps="26624"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.31" expl="loop variant decrease" proved="true">
  <proof prover="7" obsolete="true"><result status="valid" time="0.023533" steps="126803"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.31.0" expl="loop variant decrease" proved="true">
   <proof prover="7"><result status="valid" time="0.017524" steps="126920"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.31.1" expl="loop variant decrease" proved="true">
   <transf name="assert" proved="true" arg1="(not mem u closed2)">
    <goal name="shortest_path_code&#39;vc.31.1.0" expl="asserted formula" proved="true">
    <proof prover="7"><result status="valid" time="0.017712" steps="126835"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.31.1.1" expl="loop variant decrease" proved="true">
    <transf name="simplify_formula" proved="true" >
     <goal name="shortest_path_code&#39;vc.31.1.1.0" expl="loop variant decrease" proved="true">
     <proof prover="7"><result status="valid" time="0.016634" steps="127088"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.32.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.32.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.012348" steps="48"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.030813" steps="17517"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013102" steps="49"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014973" steps="115937"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.029003" steps="17462"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.027534" steps="17572"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.030718" steps="18437"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.017036" steps="127906"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.029817" steps="163195"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.023907" steps="264"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.047161" steps="257381"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.34" expl="loop invariant preservation">
  <proof prover="1"><result status="timeout" time="20.000000"/></proof>
  <proof prover="3"><result status="timeout" time="5.000000" steps="575389"/></proof>
  <proof prover="7"><result status="timeout" time="5.000000" steps="18012968"/></proof>
  <proof prover="8"><result status="timeout" time="5.000000" steps="55716"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.35" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.116461" steps="1380"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="3" obsolete="true"><result status="timeout" time="5.000000" steps="633187"/></proof>
  <proof prover="7" obsolete="true"><result status="timeout" time="5.000000" steps="18554097"/></proof>
  <proof prover="8" obsolete="true"><result status="timeout" time="5.000000" steps="52160"/></proof>
  <transf name="unfold" proved="true" arg1="path_with_len" arg2="in" arg3="Assert">
   <goal name="shortest_path_code&#39;vc.36.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.024583" steps="15762"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
