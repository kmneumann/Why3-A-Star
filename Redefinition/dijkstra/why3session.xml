<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Eprover" version="2.0" timelimit="20" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.6.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC5" version="1.2.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.15.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="GraphDef" proved="true">
 <goal name="path_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_nonneg.0" proved="true">
  <proof prover="1"><result status="valid" time="0.012174" steps="8"/></proof>
  </goal>
  <goal name="path_nonneg.1" proved="true">
  <proof prover="2"><result status="valid" time="0.027250" steps="10570"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_nonneg" proved="true">
 <proof prover="1"><result status="valid" time="0.012824" steps="10"/></proof>
 </goal>
 <goal name="shortest_path_decomposition" proved="true">
 <transf name="unfold" proved="true" arg1="shortest_path">
  <goal name="shortest_path_decomposition.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_decomposition.0.0" proved="true">
   <proof prover="3"><result status="valid" time="0.008344" steps="44285"/></proof>
   </goal>
   <goal name="shortest_path_decomposition.0.1" proved="true">
   <proof prover="2"><result status="valid" time="0.165613" steps="48654"/></proof>
   </goal>
   <goal name="shortest_path_decomposition.0.2" proved="true">
   <proof prover="1"><result status="valid" time="0.012778" steps="8"/></proof>
   </goal>
   <goal name="shortest_path_decomposition.0.3" proved="true">
   <proof prover="2"><result status="valid" time="0.104098" steps="35374"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_negation" proved="true">
 <proof prover="3"><result status="valid" time="0.008646" steps="43961"/></proof>
 </goal>
 <goal name="path_weight_sub_path" proved="true">
 <proof prover="3"><result status="valid" time="0.008906" steps="47972"/></proof>
 </goal>
 <goal name="optimal_substructure_property" proved="true">
 <proof prover="3"><result status="valid" time="0.008916" steps="46893"/></proof>
 </goal>
 <goal name="sub_path" proved="true">
 <proof prover="2"><result status="valid" time="0.019405" steps="7741"/></proof>
 </goal>
 <goal name="sub_path_inversion" proved="true">
 <proof prover="3"><result status="valid" time="0.009874" steps="51977"/></proof>
 </goal>
 <goal name="inside_or_exit_path" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit_path.0" proved="true">
  <proof prover="3"><result status="valid" time="0.003820" steps="5496"/></proof>
  </goal>
  <goal name="inside_or_exit_path.1" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="inside_or_exit_path.1.0" proved="true">
   <transf name="case" proved="true" arg1="(mem y s)">
    <goal name="inside_or_exit_path.1.0.0" expl="true case" proved="true">
    <proof prover="1"><result status="valid" time="0.044887" steps="445"/></proof>
    </goal>
    <goal name="inside_or_exit_path.1.0.1" expl="false case" proved="true">
    <transf name="exists" proved="true" arg1="src">
     <goal name="inside_or_exit_path.1.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="y">
      <goal name="inside_or_exit_path.1.0.1.0.0" proved="true">
      <proof prover="2"><result status="valid" time="0.402913" steps="97296"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="inside_or_exit_shortest_path.0" proved="true">
  <transf name="instantiate" proved="true" arg1="inside_or_exit_path" arg2="s, src, v, l">
   <goal name="inside_or_exit_shortest_path.0.0" proved="true">
   <transf name="destruct_rec" proved="true" arg1="Hinst">
    <goal name="inside_or_exit_shortest_path.0.0.0" expl="destruct premise" proved="true">
    <proof prover="2"><result status="valid" time="0.009145" steps="7314"/></proof>
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.1" expl="destruct premise" proved="true">
    <proof prover="2"><result status="valid" time="0.020066" steps="7897"/></proof>
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.2" expl="destruct premise" proved="true">
    <proof prover="1"><result status="valid" time="0.012164" steps="6"/></proof>
    </goal>
    <goal name="inside_or_exit_shortest_path.0.0.3" proved="true">
    <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, y, v, l1, l2">
     <goal name="inside_or_exit_shortest_path.0.0.3.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Hinst">
      <goal name="inside_or_exit_shortest_path.0.0.3.0.0" expl="destruct premise" proved="true">
      <proof prover="3"><result status="valid" time="0.004859" steps="16099"/></proof>
      </goal>
      <goal name="inside_or_exit_shortest_path.0.0.3.0.1" proved="true">
      <transf name="exists" proved="true" arg1="y">
       <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0" proved="true">
       <transf name="exists" proved="true" arg1="z">
        <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0" proved="true">
        <transf name="exists" proved="true" arg1="l1">
         <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l2">
          <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.0" proved="true">
           <proof prover="3"><result status="valid" time="0.003818" steps="5259"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.1" proved="true">
           <proof prover="2"><result status="valid" time="0.009199" steps="7392"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.2" proved="true">
           <proof prover="2"><result status="valid" time="0.009414" steps="7394"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.3" proved="true">
           <proof prover="3"><result status="valid" time="0.003668" steps="5259"/></proof>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4" proved="true">
           <transf name="case" proved="true" arg1="(shortest_path z l2 v)">
            <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.0" expl="true case" proved="true">
            <proof prover="3"><result status="valid" time="0.003824" steps="5264"/></proof>
            </goal>
            <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1" expl="false case" proved="true">
            <transf name="instantiate" proved="true" arg1="shortest_path_negation" arg2="z,v,l2">
             <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0" expl="false case" proved="true">
             <transf name="destruct_rec" proved="true" arg1="Hinst">
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.0" expl="destruct premise" proved="true">
              <proof prover="3"><result status="valid" time="0.003706" steps="5270"/></proof>
              </goal>
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.1" expl="false case" proved="true">
              <proof prover="3"><result status="valid" time="0.004011" steps="5277"/></proof>
              </goal>
              <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2" expl="false case" proved="true">
              <transf name="assert" proved="true" arg1="(shortest_path y (Cons y l&#39;) v)">
               <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2.0" expl="asserted formula" proved="true">
               <proof prover="1"><result status="valid" time="0.072342" steps="860"/></proof>
               </goal>
               <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.4.1.0.2.1" expl="false case" proved="true">
               <proof prover="1"><result status="valid" time="0.076273" steps="888"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="inside_or_exit_shortest_path.0.0.3.0.1.0.0.0.0.5" proved="true">
           <proof prover="3"><result status="valid" time="0.003917" steps="5266"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_imples_exists_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="path_imples_exists_shortest_path.0" proved="true">
  <transf name="assert" proved="true" arg1="(path_existance a b)">
   <goal name="path_imples_exists_shortest_path.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.014144" steps="14"/></proof>
   </goal>
   <goal name="path_imples_exists_shortest_path.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="path_existance" arg2="in" arg3="h">
    <goal name="path_imples_exists_shortest_path.0.1.0" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="path_imples_exists_shortest_path.0.1.0.0" proved="true">
     <transf name="induction" proved="true" arg1="d">
      <goal name="path_imples_exists_shortest_path.0.1.0.0.0" expl="base case" proved="true">
      <proof prover="1"><result status="valid" time="0.025421" steps="234"/></proof>
      </goal>
      <goal name="path_imples_exists_shortest_path.0.1.0.0.1" expl="recursive case" proved="true">
      <proof prover="2"><result status="valid" time="0.027536" steps="13486"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="path_zero" proved="true">
 <proof prover="1"><result status="valid" time="0.023503" steps="177"/></proof>
 </goal>
 <goal name="main_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="main_lemma.0" proved="true">
  <transf name="induction_arg_pr" proved="true" arg1="H1">
   <goal name="main_lemma.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.015267" steps="43"/></proof>
   </goal>
   <goal name="main_lemma.0.1" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="main_lemma.0.1.0" proved="true">
    <proof prover="2"><result status="valid" time="1.599241" steps="291379"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="completeness_lemma" proved="true">
 <proof prover="1"><result status="valid" time="0.026510" steps="163"/></proof>
 </goal>
 <goal name="consistent_implies_admissible" proved="true">
 <transf name="unfold" proved="true" arg1="admissible">
  <goal name="consistent_implies_admissible.0" proved="true">
  <transf name="induction_pr" proved="true" >
   <goal name="consistent_implies_admissible.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.020585" steps="8615"/></proof>
   </goal>
   <goal name="consistent_implies_admissible.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.026731" steps="255"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="consistent_is_path_consistent" proved="true">
 <transf name="unfold" proved="true" arg1="path_consistent">
  <goal name="consistent_is_path_consistent.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="consistent_is_path_consistent.0.0" proved="true">
   <proof prover="3"><result status="valid" time="0.009402" steps="61520"/></proof>
   </goal>
   <goal name="consistent_is_path_consistent.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(forall a, b, l. path a l b -&gt; f a &lt;= path_weight l b + f b)">
    <goal name="consistent_is_path_consistent.0.1.0" expl="asserted formula" proved="true">
    <transf name="induction_pr" proved="true" >
     <goal name="consistent_is_path_consistent.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.014387" steps="14"/></proof>
     </goal>
     <goal name="consistent_is_path_consistent.0.1.0.1" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.029870" steps="13123"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="consistent_is_path_consistent.0.1.1" proved="true">
    <proof prover="3"><result status="valid" time="0.009682" steps="62981"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="consistent_is_path_consistent.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.386042" steps="68454"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.014190" steps="93083"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.027894" steps="10584"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.013910" steps="98836"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.028437" steps="10575"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.028650" steps="10623"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.023298" steps="141493"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.014390" steps="101025"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="0"><result status="valid" time="0.061015"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.018081" steps="9870"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.014064" steps="99076"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.022180" steps="199"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.234153" steps="56798"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.004237" steps="7545"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(exists k. shortest_path_with_len src u k)">
   <goal name="shortest_path_code&#39;vc.4.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.457020"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.4.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="1.272632" steps="263635"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="2.270995" steps="458042"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.015475" steps="36"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.014713" steps="117742"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="1.566559" steps="18081"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.051532" steps="19128"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.012302" steps="11116"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.041473" steps="15300"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020056" steps="153084"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.018026" steps="150746"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.14.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.14.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.020022" steps="152307"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.620191" steps="144547"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.019347" steps="91"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.016218" steps="135394"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.032098" steps="210697"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.124311" steps="607201"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.074080" steps="399865"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="case" proved="true" arg1="(n = y)">
     <goal name="shortest_path_code&#39;vc.14.0.7.0" expl="true case" proved="true">
     <transf name="assert" proved="true" arg1="(path_with_len src u d[u])">
      <goal name="shortest_path_code&#39;vc.14.0.7.0.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.063242" steps="384238"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.14.0.7.0.1" expl="true case" proved="true">
      <proof prover="2"><result status="valid" time="1.157064" steps="152433"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.14.0.7.1" expl="false case" proved="true">
     <proof prover="2"><result status="valid" time="0.084804" steps="27387"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.335076" steps="69788"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.14.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="2"><result status="valid" time="0.043267" steps="16083"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.327495" steps="61817"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.019449" steps="11725"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.020574" steps="146752"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.019296" steps="89"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.004272" steps="8156"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.130659" steps="42690"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.21" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(shortest_path_with_len src y d[y])">
   <goal name="shortest_path_code&#39;vc.21.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.039287" steps="14779"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.21.1" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="3.012313" steps="470197"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.22" expl="loop variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.018873" steps="88"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.037341" steps="14668"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.24" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.24.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.24.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.014595" steps="124372"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.015233" steps="124411"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.018443" steps="73"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.016340" steps="124411"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.015482" steps="124558"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.018279" steps="73"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.019713" steps="140342"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.020122" steps="141126"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.030791" steps="197943"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.24.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.019704" steps="140574"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.25" expl="loop invariant preservation" proved="true">
  <transf name="assert" proved="true" arg1="(shortest_path_with_len src y d[y])">
   <goal name="shortest_path_code&#39;vc.25.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.019900" steps="139788"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.25.1" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.441466" steps="1897897"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.26" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.059542" steps="20499"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.27" expl="loop variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.048641" steps="17887"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.004351" steps="7996"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.046288" steps="270304"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.30" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(mem src open)">
   <goal name="shortest_path_code&#39;vc.30.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="2"><result status="valid" time="2.804828" steps="407140"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.30.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="inside_or_exit_shortest_path" arg2="(closed.to_fset), src, n, l">
    <goal name="shortest_path_code&#39;vc.30.1.0" expl="false case (loop invariant preservation)" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Hinst">
     <goal name="shortest_path_code&#39;vc.30.1.0.0" expl="destruct premise" proved="true">
     <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant7">
      <goal name="shortest_path_code&#39;vc.30.1.0.0.0" expl="destruct premise" proved="true">
      <proof prover="3"><result status="valid" time="0.017266" steps="134488"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.30.1.0.1" expl="destruct premise" proved="true">
     <proof prover="3"><result status="valid" time="0.004743" steps="8033"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.30.1.0.2" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.012723" steps="11190"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.30.1.0.3" expl="false case (loop invariant preservation)" proved="true">
     <transf name="unfold" proved="true" arg1="inv_succ" arg2="in" arg3="LoopInvariant">
      <goal name="shortest_path_code&#39;vc.30.1.0.3.0" expl="false case (loop invariant preservation)" proved="true">
      <transf name="inst_rem" proved="true" arg1="LoopInvariant" arg2="y">
       <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0" expl="false case (loop invariant preservation)" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.0" expl="destruct premise" proved="true">
        <proof prover="3"><result status="valid" time="0.004765" steps="8082"/></proof>
        </goal>
        <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <transf name="inst_rem" proved="true" arg1="Hinst" arg2="z">
         <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0" expl="false case (loop invariant preservation)" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.0" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="0.016331" steps="125273"/></proof>
          </goal>
          <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1" expl="false case (loop invariant preservation)" proved="true">
          <transf name="assert" proved="true" arg1="(shortest_path src (l1 ++ Cons y Nil) z)">
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0" expl="asserted formula" proved="true">
           <transf name="case" proved="true" arg1="(l2 = Nil)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.0" expl="asserted formula (true case)" proved="true">
            <proof prover="3"><result status="valid" time="0.004514" steps="7918"/></proof>
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1" expl="asserted formula (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(exists l2&#39;. l2 = Cons z l2&#39;)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
             <proof prover="1"><result status="valid" time="0.014841" steps="64"/></proof>
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1" expl="asserted formula (false case)" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0" expl="asserted formula (false case)" proved="true">
              <transf name="assert" proved="true" arg1="(l = (l1 ++ Cons y Nil) ++ (Cons z l2&#39;))">
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="0.013848" steps="12002"/></proof>
               </goal>
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0.1" expl="asserted formula (false case)" proved="true">
               <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, z, n, (l1 ++ (Cons y Nil)), l2&#39;">
                <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.0.1.1.0.1.0" expl="asserted formula (false case)" proved="true">
                <proof prover="3"><result status="valid" time="0.004557" steps="7967"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1" expl="false case (loop invariant preservation)" proved="true">
           <transf name="assert" proved="true" arg1="(d[z] &gt;= path_weight (l1 ++ Cons y Nil) z)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
            <proof prover="1"><result status="valid" time="0.015093" steps="64"/></proof>
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1" expl="false case (loop invariant preservation)" proved="true">
            <transf name="assert" proved="true" arg1="(d[y] + weight y z = path_weight (l1 ++ Cons y Nil) z)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(d[y] = path_weight l1 y)">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.0.0" expl="asserted formula" proved="true">
              <proof prover="3"><result status="valid" time="0.004463" steps="8154"/></proof>
              </goal>
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.0.1" expl="asserted formula" proved="true">
              <proof prover="3"><result status="valid" time="0.004561" steps="7950"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.1.1.1.1" expl="false case (loop invariant preservation)" proved="true">
             <proof prover="3"><result status="valid" time="0.004277" steps="8213"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2" expl="false case (loop invariant preservation)" proved="true">
          <transf name="assert" proved="true" arg1="(shortest_path src (l1 ++ Cons y Nil) z)">
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0" expl="asserted formula" proved="true">
           <transf name="case" proved="true" arg1="(l2 = Nil)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.0" expl="asserted formula (true case)" proved="true">
            <proof prover="3"><result status="valid" time="0.020385" steps="141656"/></proof>
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1" expl="asserted formula (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(exists l2&#39;. l2 = Cons z l2&#39;)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.0" expl="asserted formula" proved="true">
             <proof prover="3"><result status="valid" time="0.029882" steps="184335"/></proof>
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1" expl="asserted formula (false case)" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h1">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0" expl="asserted formula (false case)" proved="true">
              <transf name="assert" proved="true" arg1="(l = (l1 ++ Cons y Nil) ++ (Cons z l2&#39;))">
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="0.052858" steps="18383"/></proof>
               </goal>
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0.1" expl="asserted formula (false case)" proved="true">
               <transf name="instantiate" proved="true" arg1="shortest_path_decomposition" arg2="src, z, n, (l1 ++ (Cons y Nil)), l2&#39;">
                <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.0.1.1.0.1.0" expl="asserted formula (false case)" proved="true">
                <proof prover="1"><result status="valid" time="0.014588" steps="77"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1" expl="false case (loop invariant preservation)" proved="true">
           <transf name="assert" proved="true" arg1="(d[z] &gt;= path_weight (l1 ++ Cons y Nil) z)">
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.932625" steps="3411296"/></proof>
            </goal>
            <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1" expl="false case (loop invariant preservation)" proved="true">
            <transf name="assert" proved="true" arg1="(d[y] + weight y z = path_weight (l1 ++ Cons y Nil) z)">
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(d[y] = path_weight l1 y)">
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0" expl="asserted formula" proved="true">
              <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
               <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0" expl="asserted formula" proved="true">
               <transf name="split_premise_full" proved="true" >
                <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="inst_rem" proved="true" arg1="LoopInvariant6" arg2="y">
                 <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="Hinst">
                  <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                  <proof prover="3"><result status="valid" time="0.004969" steps="10379"/></proof>
                  </goal>
                  <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
                  <proof prover="3"><result status="valid" time="0.055020" steps="341366"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.0.1" expl="asserted formula" proved="true">
              <proof prover="2"><result status="valid" time="0.038137" steps="16156"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="shortest_path_code&#39;vc.30.1.0.3.0.0.1.0.2.1.1.1" expl="false case (loop invariant preservation)" proved="true">
             <proof prover="2"><result status="valid" time="0.136711" steps="35253"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.054816" steps="20856"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.32" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.014226" steps="109431"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
