<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.15.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="DijkstraShortestPath" proved="true">
 <goal name="relax&#39;vc" expl="VC for relax" proved="true">
 <proof prover="3"><result status="valid" time="0.021613" steps="10751"/></proof>
 </goal>
 <goal name="Length_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Length_nonneg.0" proved="true">
  <proof prover="7"><result status="valid" time="0.005965" steps="1934"/></proof>
  </goal>
  <goal name="Length_nonneg.1" proved="true">
  <proof prover="7"><result status="valid" time="0.011381" steps="41403"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Path_inversion" proved="true">
 <proof prover="3"><result status="valid" time="0.010411" steps="7630"/></proof>
 </goal>
 <goal name="Path_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_shortest_path.0" proved="true">
  <transf name="induction" proved="true" arg1="d">
   <goal name="Path_shortest_path.0.0" expl="base case" proved="true">
   <proof prover="7"><result status="valid" time="0.016723" steps="48293"/></proof>
   </goal>
   <goal name="Path_shortest_path.0.1" expl="recursive case" proved="true">
   <proof prover="3"><result status="valid" time="0.024390" steps="11507"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Main_lemma" proved="true">
 <proof prover="3"><result status="valid" time="0.038362" steps="18844"/></proof>
 </goal>
 <goal name="Completeness_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Completeness_lemma.0" proved="true">
  <proof prover="3"><result status="valid" time="0.008415" steps="7959"/></proof>
  </goal>
  <goal name="Completeness_lemma.1" proved="true">
  <proof prover="7"><result status="valid" time="0.011647" steps="50306"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit.0" proved="true">
  <proof prover="8"><result status="valid" time="0.014943" steps="2"/></proof>
  </goal>
  <goal name="inside_or_exit.1" proved="true">
  <proof prover="8"><result status="valid" time="0.024633" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014143" steps="65127"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.016242" steps="41"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014436" steps="68289"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013372" steps="71224"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.016230" steps="31"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.017000" steps="38"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.018096" steps="70"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.050000" steps="13257"/></proof>
  <proof prover="7"><result status="valid" time="0.014378" steps="73640"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.100000" steps="14705"/></proof>
  <proof prover="3"><result status="valid" time="0.028411" steps="12027"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.030000" steps="11645"/></proof>
  <proof prover="7"><result status="valid" time="0.004105" steps="4656"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.080000" steps="17638"/></proof>
  <proof prover="7"><result status="valid" time="0.044010" steps="171679"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.050000" steps="13605"/></proof>
  <proof prover="7"><result status="valid" time="0.013847" steps="76567"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.6.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.6.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="147"/></proof>
    <proof prover="8" timelimit="10"><result status="valid" time="0.033366" steps="180"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="2" obsolete="true"><result status="valid" time="0.040000" steps="13736"/></proof>
    <proof prover="3"><result status="valid" time="0.016454" steps="11315"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.2" expl="VC for shortest_path_code" proved="true">
    <transf name="unfold" proved="true" arg1="subset">
     <goal name="shortest_path_code&#39;vc.6.0.2.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.180000" steps="17044"/></proof>
     <proof prover="8"><result status="valid" time="0.050342" steps="480"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="1" obsolete="true"><result status="valid" time="0.020000" steps="148"/></proof>
    <proof prover="3"><result status="valid" time="0.025597" steps="12714"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="2" obsolete="true"><result status="valid" time="0.050000" steps="16339"/></proof>
    <proof prover="7"><result status="valid" time="0.016116" steps="87317"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="1" obsolete="true"><result status="valid" time="0.070000" steps="258"/></proof>
    <proof prover="3"><result status="valid" time="0.028812" steps="13322"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.6.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="2" obsolete="true"><result status="valid" time="0.110000" steps="16218"/></proof>
    <proof prover="7"><result status="valid" time="0.014632" steps="80391"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="shortest_path_code&#39;vc.7.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.7.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="2" obsolete="true"><result status="valid" time="0.090000" steps="22810"/></proof>
    <proof prover="3"><result status="valid" time="0.044917" steps="19869"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.7.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1" obsolete="true"><result status="valid" time="0.060000" steps="439"/></proof>
    <proof prover="8"><result status="valid" time="0.059573" steps="591"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="precondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.030000" steps="13259"/></proof>
  <proof prover="7"><result status="valid" time="0.004456" steps="5356"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="assertion" proved="true">
  <transf name="destruct" proved="true" arg1="Ensures">
   <goal name="shortest_path_code&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="0" obsolete="true"><result status="valid" time="0.040000" steps="194242"/></proof>
   <proof prover="7"><result status="valid" time="0.320117" steps="1212263"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.9.1" expl="assertion" proved="true">
   <proof prover="4" obsolete="true"><result status="valid" time="0.050000" steps="485"/></proof>
   <proof prover="8"><result status="valid" time="0.052211" steps="540"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="loop variant decrease" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.100000" steps="17886"/></proof>
  <proof prover="7"><result status="valid" time="0.016530" steps="94003"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.080000" steps="18125"/></proof>
  <proof prover="8"><result status="valid" time="0.023921" steps="67"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.12.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.12.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.12.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2"><result status="valid" time="0.070000" steps="19197"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.1" expl="VC for shortest_path_code" proved="true">
     <transf name="case" proved="true" arg1="(v=src)">
      <goal name="shortest_path_code&#39;vc.12.0.0.1.0" expl="true case" proved="true">
      <proof prover="2" obsolete="true"><result status="valid" time="0.240000" steps="33769"/></proof>
      <proof prover="3"><result status="valid" time="0.072480" steps="28703"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.12.0.0.1.1" expl="false case" proved="true">
      <proof prover="4" obsolete="true"><result status="valid" time="0.070000" steps="870"/></proof>
      <proof prover="8"><result status="valid" time="0.054625" steps="576"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.040000" steps="13821"/></proof>
     <proof prover="7"><result status="valid" time="0.004642" steps="5684"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.250000" steps="33247"/></proof>
     <proof prover="3"><result status="valid" time="0.067556" steps="25287"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.050000" steps="15325"/></proof>
     <proof prover="3"><result status="valid" time="0.020284" steps="12155"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="4" obsolete="true"><result status="valid" time="0.090000" steps="1213"/></proof>
     <proof prover="8"><result status="valid" time="0.063968" steps="733"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.12.0.0.6" expl="VC for shortest_path_code" proved="true">
     <proof prover="8"><result status="valid" time="2.673160" steps="28199"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2">
   <goal name="shortest_path_code&#39;vc.13.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.13.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.13.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000" obsolete="true"><result status="valid" time="0.200000" steps="39681"/></proof>
     <proof prover="3"><result status="valid" time="0.082652" steps="34337"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.13.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="1" timelimit="5" obsolete="true"><result status="valid" time="0.533737" steps="3654"/></proof>
    <proof prover="8"><result status="valid" time="0.314941" steps="4197"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop variant decrease" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.150000" steps="20060"/></proof>
  <proof prover="7"><result status="valid" time="0.014778" steps="85303"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.030000" steps="13257"/></proof>
  <proof prover="8"><result status="valid" time="0.015679" steps="34"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.160000" steps="22426"/></proof>
  <proof prover="7"><result status="valid" time="0.021432" steps="107857"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="0" obsolete="true"><result status="valid" time="0.360000" steps="561164"/></proof>
  <proof prover="1" obsolete="true"><result status="valid" time="0.992317" steps="3102"/></proof>
  <proof prover="8"><result status="valid" time="0.553737" steps="4755"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.060000" steps="14069"/></proof>
  <proof prover="7"><result status="valid" time="0.017122" steps="82169"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.410000" steps="45046"/></proof>
  <proof prover="3"><result status="valid" time="0.035584" steps="16910"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
