(*
  =================================================
  Implementation of a Map
  =================================================
   
  ( Copied from proof for Dijkstra's )
 *)
module ImpmapNoDom

  use map.Map
  use map.Const

  type key

  type t 'a = abstract { mutable contents: map key 'a }

  val function create (x: 'a): t 'a
    ensures { result.contents = const x }

  val function ([]) (m: t 'a) (k: key): 'a
    ensures { result = m.contents[k] }

  val ghost function ([<-]) (m: t 'a) (k: key) (v: 'a): t 'a
    ensures { result.contents = m.contents[k <- v] }

  val ([]<-) (m: t 'a) (k: key) (v: 'a): unit
    writes { m }
    ensures { m = (old m)[k <- v] }

end



module AStar
  
  use int.Int
  use int.MinMax
  use ref.Ref
  use option.Option
  use list.List
  use list.Reverse
  use set.Fset
  
  
  
  (* 
    =================================================
    Specifies a Graph 
    =================================================
   *)

  type vertex = int
  
  clone set.SetImp with type elt = vertex
  clone ImpmapNoDom with type key = vertex

  constant vertices: fset vertex                                                                            (* Set of all vertices *)
  
  val ghost function successor (_x: vertex) : fset vertex
    ensures { subset result vertices }
  
  val neighbours (x: vertex): set                                                                           (* Succesor function *)
    ensures { result = successor x }

  val function weight vertex vertex : int                                                                   (* edge weight, if there is an edge *)
    ensures { result >= 0 }
  
  
  
  (* 
    =================================================
    Specifies Definition of Shortest Path
    =================================================
   *)
  
  (* Inductive definition of a path: source, destination, and total distance *)
  inductive path vertex vertex int =
    | Path_nil :                                                                                            (* A path with a single node of lenght zero is a valid path *)
        forall x: vertex. path x x 0
    | Path_cons:                                                                                            (* All other paths are a step to a neighbour node, by the weight of the edge between them *)
        forall x y z: vertex. forall d: int.
        path x y d -> mem z (successor y) -> path x z (d + weight y z)
        
  lemma Nonneg_path: forall x y: vertex. forall d: int. path x y d -> d >= 0                                (* Paths cannot have negative length *)
        
  (* Definition of the shortest path *)
  predicate shortest_path (x y: vertex) (d: int) =
    path x y d /\ forall d': int. path x y d' -> d <= d'                                                    (* There exists a path of that distance, and there exists no shorter path *)
  
  
  
  (* 
    =================================================
    Lemmas About Paths
    =================================================
   *)
  
  

  
  lemma Path_inversion:                                     
    forall src v: vertex. forall d:int. path src v d ->                                                     (* If there is a path from a to b, *)
    (v = src /\ d = 0) \/                                                                                   (* it must either have length zero, *)
    (exists v':vertex. path src v' (d - weight v' v) /\ mem v (successor v'))                               (* or have a subpath within it. *)
    
  lemma Path_implies_shortest_path:
    forall src v: vertex. forall d: int. path src v d ->                                                    (* If there is a path from src to v with length d *)
    exists d': int. shortest_path src v d' /\ d' <= d                                                       (* then there is also a shortest path and its length is at most d. *)
  
  lemma Path_implies_shortest_path_from_neighbours:
    forall src v: vertex. forall d: int. path src v d ->                                                    (* If there is a path from src to v of length d, *) 
    not (shortest_path src v d) ->                                                                          (* and it is not the shortest, *)
    v = src /\ d > 0                                                                                        (* then either v is the src and d > 0, *)
    \/ exists v': vertex. exists d': int. shortest_path src v' d' /\ mem v (successor v')                   (* or there must exist a shortest path from src to a neighbour of v, *)
      /\ d' + weight v' v < d                                                                               (* such that its distance plus the weight of the edge connecting it to v is less the length d.  *)
  
  (* 
    `Closed under successor` 
    implies 
    `if there is a path from one member to a node, then that node is also a member` *) 
  lemma Completeness_of_paths_in_a_graph:
    forall s: set.                                                                                          (* For any set of vertices s, *)                                                                               
    (forall v: vertex. mem v s -> forall w: vertex. mem w (successor v) -> mem w s) ->                      (* if s is closed under `successor`, *)
    forall src: vertex. mem src s ->                                                                        (* and if s contains src, *)
    forall dst: vertex. forall d: int. path src dst d -> mem dst s                                          (* then any vertex reachable from s is also in s *)
  
  
    
  (* 
    =================================================
    Specifies Structures Used in The Algorithm
    =================================================
   *)
  
  val gScore: t int                                                                                         (* Map: node -> its shortest found distance *)
  val fScore: t int                                                                                         (* Map: node -> its shortest found distance *)
  val openSet: set                                                                                          (* Priority queue, implemented as a set *)
  val comeFrom: t vertex
  
  val function h (v: vertex): int                                                                           (* Heuristic function *)
  
  predicate admissible (dest: vertex) = forall v: vertex, d: int. shortest_path v dest d -> h v <= d
  
  (* The definition of minimum value in our queue *) 
  predicate min (m: vertex) (q: set) (d: t int) =
    mem m q /\                                  
    forall x: vertex. mem x q -> d[m] <= d[x]

  
  
  
  (* 
    =================================================
    Lemmas About Paths
    =================================================
   *)

  let inf = 1_000_000_000
  
  let reconstruct_path (comeFrom: t vertex) (src current: vertex) 
  = let ref totalPath = Cons current Nil in
    while not (current = src) do
      let current = comeFrom[current] in
      totalPath := Cons current totalPath 
    done;
    reverse totalPath
      
  
  let a_star_algorithm (src dst: vertex): option (list vertex)
    requires { mem src vertices /\ mem dst vertices}
    requires { forall a b: vertex. weight a b < inf }
                 
  = let gScore = create inf in 
    gScore[src]<-0;
    let fScore = create inf in 
    fScore[src]<-(h src);
    let comeFrom = create dst in
    let openSet = singleton src in
    let ref result = None in
    
    while not (is_empty openSet) && not (is_none result) do
      let current = choose_and_remove openSet in 
      if eq current dst then 
        result := Some (reconstruct_path comeFrom src current)
      else 
        let ref neighbourSet = neighbours current in 
        while not (is_empty neighbourSet) do
          variant { cardinal neighbourSet }
          let neighbour = choose_and_remove neighbourSet in
          let tentative_gScore = gScore[current] + weight current neighbour in 
          if tentative_gScore < gScore[neighbour] then 
            comeFrom[neighbour]<-current;
            gScore[neighbour]<-tentative_gScore;
            fScore[neighbour]<-(tentative_gScore + h neighbour);
            if not (mem neighbour openSet) then
              add neighbour openSet;
          
        done;
    done;
    result
end












