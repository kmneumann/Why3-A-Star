<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="3" name="CVC5" version="1.1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.15.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="DijkstraShortestPath" proved="true">
 <goal name="Length_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Length_nonneg.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.004246" steps="2657"/></proof>
  </goal>
  <goal name="Length_nonneg.1" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.009362" steps="50629"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Shortest_length_nonneg" proved="true">
 <proof prover="7" timelimit="1"><result status="valid" time="0.007353" steps="35797"/></proof>
 </goal>
 <goal name="shortest_path_to_self" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="shortest_path_to_self.0" proved="true">
  <transf name="assert" proved="true" arg1="(path v v 0)">
   <goal name="shortest_path_to_self.0.0" expl="asserted formula" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.008512" steps="35861"/></proof>
   </goal>
   <goal name="shortest_path_to_self.0.1" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.006730" steps="36280"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_one_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_one_step.0" proved="true">
  <transf name="assert" proved="true" arg1="(path a a 0 /\ path b b 0)">
   <goal name="Path_one_step.0.0" expl="asserted formula" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.016954" steps="92779"/></proof>
   </goal>
   <goal name="Path_one_step.0.1" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.008345" steps="51875"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_append" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_append.0" proved="true">
  <transf name="assert" proved="true" arg1="(path u u 0)">
   <goal name="Path_append.0.0" expl="asserted formula" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.008590" steps="52007"/></proof>
   </goal>
   <goal name="Path_append.0.1" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.008811" steps="52381"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_inversion" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Path_inversion.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.003362" steps="4409"/></proof>
  </goal>
  <goal name="Path_inversion.1" proved="true">
  <proof prover="3" timelimit="1"><result status="valid" time="0.248192" steps="126560"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Path_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_shortest_path.0" proved="true">
  <transf name="induction" proved="true" arg1="d">
   <goal name="Path_shortest_path.0.0" expl="base case" proved="true">
   <proof prover="7" timelimit="1"><result status="valid" time="0.016252" steps="53343"/></proof>
   </goal>
   <goal name="Path_shortest_path.0.1" expl="recursive case" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="0.024834" steps="22715"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="left_extend" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="left_extend.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.008856" steps="53691"/></proof>
  </goal>
  <goal name="left_extend.1" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.008988" steps="56325"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="right_extend" proved="true">
 <proof prover="7" timelimit="1"><result status="valid" time="0.009064" steps="54536"/></proof>
 </goal>
 <goal name="path_inversion_left" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_inversion_left.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.003588" steps="4593"/></proof>
  </goal>
  <goal name="path_inversion_left.1" proved="true">
  <proof prover="3"><result status="valid" time="2.882973" steps="1269468"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="optimal_substructure" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="optimal_substructure.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.014365" steps="173909"/></proof>
  </goal>
  <goal name="optimal_substructure.1" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.017139" steps="172455"/></proof>
  </goal>
  <goal name="optimal_substructure.2" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.012457" steps="115577"/></proof>
  </goal>
  <goal name="optimal_substructure.3" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.037681" steps="115243"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_splitting" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.030372" steps="22986"/></proof>
 </goal>
 <goal name="path_splitting_noneq" proved="true">
 <proof prover="7" timelimit="1"><result status="valid" time="0.512574" steps="2140382"/></proof>
 </goal>
 <goal name="path_merging" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_merging.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.003662" steps="3759"/></proof>
  </goal>
  <goal name="path_merging.1" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.009531" steps="61241"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subpath_optimality_constraint" proved="true">
 <proof prover="8" timelimit="1"><result status="valid" time="0.073796" steps="779"/></proof>
 </goal>
 <goal name="consistent_implies_admissible" proved="true">
 <proof prover="7" timelimit="1"><result status="valid" time="0.020283" steps="51100"/></proof>
 </goal>
 <goal name="Main_lemma" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.611051" steps="296288"/></proof>
 </goal>
 <goal name="Completeness_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Completeness_lemma.0" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.003638" steps="5371"/></proof>
  </goal>
  <goal name="Completeness_lemma.1" proved="true">
  <proof prover="7" timelimit="1"><result status="valid" time="0.011795" steps="74941"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_1" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit_1.0" proved="true">
  <proof prover="7"><result status="valid" time="0.004277" steps="5648"/></proof>
  </goal>
  <goal name="inside_or_exit_1.1" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="inside_or_exit_1.1.0" proved="true">
   <transf name="case" proved="true" arg1="((not mem a s) \/ (not mem y s))">
    <goal name="inside_or_exit_1.1.0.0" expl="true case" proved="true">
    <proof prover="8"><result status="valid" time="0.046083" steps="353"/></proof>
    </goal>
    <goal name="inside_or_exit_1.1.0.1" expl="false case" proved="true">
    <proof prover="7"><result status="valid" time="0.021931" steps="107082"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_2" proved="true">
 <proof prover="7"><result status="valid" time="0.011193" steps="73360"/></proof>
 </goal>
 <goal name="inside_or_exit" proved="true">
 <proof prover="7"><result status="valid" time="0.026825" steps="159504"/></proof>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013931" steps="92666"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013508" steps="92412"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013920" steps="95824"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014108" steps="99759"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.016433" steps="14224"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.011075" steps="53"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.021920" steps="133344"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="case" proved="true" arg1="(x = src)">
     <goal name="shortest_path_code&#39;vc.0.0.7.0" expl="true case" proved="true">
     <transf name="cut" proved="true" arg1="(dx = 0)">
      <goal name="shortest_path_code&#39;vc.0.0.7.0.0" expl="true case" proved="true">
      <proof prover="7"><result status="valid" time="0.013798" steps="96743"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.0.0.7.0.1" expl="asserted formula" proved="true">
      <proof prover="8"><result status="valid" time="0.009609" steps="19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.0.0.7.1" expl="false case" proved="true">
     <proof prover="3"><result status="valid" time="0.021292" steps="15418"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.024260" steps="15843"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.008737" steps="16"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.014756" steps="104945"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <transf name="exists" proved="true" arg1="src">
   <goal name="shortest_path_code&#39;vc.2.0" proved="true">
   <proof prover="8"><result status="valid" time="0.069545" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.011239" steps="14685"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.4.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="shortest_path_code&#39;vc.4.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.4.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.029343" steps="20863"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.4.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.064685" steps="363751"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.058108" steps="22175"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.017418" steps="120843"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.108633" steps="607252"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.017096" steps="15980"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.9.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.9.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.018171" steps="131628"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013991" steps="109701"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.016112" steps="132843"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.015149" steps="114704"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.020838" steps="133058"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.072565" steps="115820"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.014208" steps="227"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.015640" steps="117231"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.027327" steps="339"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.9.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.103229" steps="55496"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.048055" steps="31133"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="0.008676" steps="38"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.044199" steps="638372"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.032399" steps="20714"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="loop variant decrease" proved="true">
  <proof prover="7"><result status="valid" time="0.016720" steps="130582"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.014977" steps="90"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.16.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.16.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.017593" steps="130003"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.045955" steps="244312"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.028906" steps="20264"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.057208" steps="32770"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.017088" steps="130532"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.042390" steps="250063"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="1.248432" steps="10680"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.16.0.7.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="3" timelimit="10" memlimit="4000"><result status="valid" time="8.530216" steps="3114178"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.16.0.7.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="1"><result status="valid" time="0.004131" steps="7726"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="1.922159" steps="15628"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.16.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="1.599853" steps="447451"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.17.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.389872" steps="155418"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.17.1" expl="loop invariant preservation" proved="true">
   <proof prover="7"><result status="valid" time="0.004263" steps="7722"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.011523" steps="15999"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030409" steps="20084"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.017232" steps="123741"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.21" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.21.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.21.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013188" steps="65"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.029610" steps="20063"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014679" steps="115609"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.029261" steps="20041"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.031375" steps="21674"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.015827" steps="124646"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.016671" steps="124775"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.017614" steps="126487"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.8" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.016838" steps="124551"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.21.0.9" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.022569" steps="153970"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.22" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2" arg2="in" arg3="LoopInvariant2">
   <goal name="shortest_path_code&#39;vc.22.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="inv_succ2">
    <goal name="shortest_path_code&#39;vc.22.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.22.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="8"><result status="valid" time="0.043010" steps="651"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.22.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.068564" steps="20873"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.23" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.017138" steps="16334"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.24" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.031644" steps="20603"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.25" expl="loop variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="0.015522" steps="93"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.017380" steps="128590"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.27" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.27.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.27.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.27.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.032405" steps="21869"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.034045" steps="21855"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="8"><result status="valid" time="0.009476" steps="68"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.023095" steps="162009"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.032626" steps="21397"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.040060" steps="23274"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.6" expl="VC for shortest_path_code" proved="true">
     <proof prover="8"><result status="valid" time="0.241274" steps="3266"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.7" expl="VC for shortest_path_code" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="shortest_path_code&#39;vc.27.0.0.7.0" expl="VC for shortest_path_code" proved="true">
      <proof prover="8"><result status="valid" time="0.009422" steps="54"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.27.0.0.7.1" expl="VC for shortest_path_code" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="shortest_path_code&#39;vc.27.0.0.7.1.0" expl="VC for shortest_path_code" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="shortest_path_code&#39;vc.27.0.0.7.1.0.0" expl="VC for shortest_path_code" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="shortest_path_code&#39;vc.27.0.0.7.1.0.0.0" expl="VC for shortest_path_code" proved="true">
         <transf name="inline_goal" proved="true" >
          <goal name="shortest_path_code&#39;vc.27.0.0.7.1.0.0.0.0" expl="VC for shortest_path_code" proved="true">
          <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="18.984679" steps="6505648"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.8" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.079402" steps="42238"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.9" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.830321" steps="238087"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.368443" steps="126833"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.29" expl="loop variant decrease" proved="true">
  <proof prover="8"><result status="valid" time="0.026767" steps="310"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.011576" steps="15946"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.31" expl="loop invariant preservation" proved="true">
  <proof prover="7"><result status="valid" time="0.035350" steps="200141"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="inside_or_exit" arg2="(closed.to_fset), src, n, dist">
   <goal name="shortest_path_code&#39;vc.32.0" expl="loop invariant preservation" proved="true">
   <transf name="case" proved="true" arg1="(mem src open)">
    <goal name="shortest_path_code&#39;vc.32.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="7"><result status="valid" time="0.041025" steps="241394"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.32.0.1" expl="false case (loop invariant preservation)" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Hinst">
     <goal name="shortest_path_code&#39;vc.32.0.1.0" expl="destruct premise" proved="true">
     <proof prover="8"><result status="valid" time="0.014452" steps="61"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.32.0.1.1" expl="destruct premise" proved="true">
     <proof prover="7"><result status="valid" time="0.004461" steps="7603"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.32.0.1.2" expl="destruct premise" proved="true">
     <proof prover="7"><result status="valid" time="0.004590" steps="7605"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.32.0.1.3" expl="false case (loop invariant preservation)" proved="true">
     <transf name="assert" proved="true" arg1="(shortest_path src z d[z])">
      <goal name="shortest_path_code&#39;vc.32.0.1.3.0" expl="asserted formula" proved="true">
      <proof prover="7"><result status="valid" time="0.420630" steps="2291336"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.32.0.1.3.1" expl="false case (loop invariant preservation)" proved="true">
      <transf name="exists" proved="true" arg1="z">
       <goal name="shortest_path_code&#39;vc.32.0.1.3.1.0" proved="true">
       <proof prover="7"><result status="valid" time="0.057918" steps="317942"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.051900" steps="36737"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.028354" steps="162045"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.018294" steps="123216"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
