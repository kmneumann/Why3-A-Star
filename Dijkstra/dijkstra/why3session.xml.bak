<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="3" name="CVC5" version="1.1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.15.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="8" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="dijkstra.mlw"/>
<theory name="DijkstraShortestPath" proved="true">
 <goal name="Length_nonneg" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Length_nonneg.0" proved="true">
  <proof prover="7"><result status="valid" time="0.004246" steps="2657"/></proof>
  </goal>
  <goal name="Length_nonneg.1" proved="true">
  <proof prover="7"><result status="valid" time="0.009362" steps="50629"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Shortest_length_nonneg" proved="true">
 <proof prover="7"><result status="valid" time="0.007353" steps="35797"/></proof>
 <proof prover="8" obsolete="true"><result status="valid" time="0.005936" steps="8"/></proof>
 </goal>
 <goal name="shortest_path_to_self" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="shortest_path_to_self.0" proved="true">
  <transf name="assert" proved="true" arg1="(path v v 0)">
   <goal name="shortest_path_to_self.0.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="0.008512" steps="35861"/></proof>
   </goal>
   <goal name="shortest_path_to_self.0.1" proved="true">
   <proof prover="3" obsolete="true"><result status="valid" time="0.012664" steps="8259"/></proof>
   <proof prover="7"><result status="valid" time="0.006730" steps="36280"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_one_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_one_step.0" proved="true">
  <transf name="assert" proved="true" arg1="(path a a 0 /\ path b b 0)">
   <goal name="Path_one_step.0.0" expl="asserted formula" proved="true">
   <proof prover="3" obsolete="true"><result status="valid" time="0.011572" steps="9644"/></proof>
   <proof prover="7"><result status="valid" time="0.016954" steps="92779"/></proof>
   </goal>
   <goal name="Path_one_step.0.1" proved="true">
   <proof prover="7"><result status="valid" time="0.008345" steps="51875"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_append" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_append.0" proved="true">
  <transf name="assert" proved="true" arg1="(path u u 0)">
   <goal name="Path_append.0.0" expl="asserted formula" proved="true">
   <proof prover="7"><result status="valid" time="0.008590" steps="52007"/></proof>
   <proof prover="8" obsolete="true"><result status="valid" time="0.007431" steps="6"/></proof>
   </goal>
   <goal name="Path_append.0.1" proved="true">
   <proof prover="3" obsolete="true"><result status="valid" time="0.021175" steps="13535"/></proof>
   <proof prover="7"><result status="valid" time="0.008811" steps="52381"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Path_inversion" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Path_inversion.0" proved="true">
  <proof prover="3" obsolete="true"><result status="valid" time="0.009438" steps="9488"/></proof>
  <proof prover="7"><result status="valid" time="0.003362" steps="4409"/></proof>
  </goal>
  <goal name="Path_inversion.1" proved="true">
  <proof prover="3" timelimit="1"><result status="valid" time="0.248192" steps="126560"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Path_shortest_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="Path_shortest_path.0" proved="true">
  <transf name="induction" proved="true" arg1="d">
   <goal name="Path_shortest_path.0.0" expl="base case" proved="true">
   <proof prover="7"><result status="valid" time="0.016252" steps="53343"/></proof>
   <proof prover="8" obsolete="true"><result status="valid" time="0.013954" steps="123"/></proof>
   </goal>
   <goal name="Path_shortest_path.0.1" expl="recursive case" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="0.024834" steps="22715"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="left_extend" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="left_extend.0" proved="true">
  <proof prover="7"><result status="valid" time="0.008856" steps="53691"/></proof>
  </goal>
  <goal name="left_extend.1" proved="true">
  <proof prover="7"><result status="valid" time="0.008988" steps="56325"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="right_extend" proved="true">
 <proof prover="3" obsolete="true"><result status="valid" time="0.010182" steps="10174"/></proof>
 <proof prover="7"><result status="valid" time="0.009064" steps="54536"/></proof>
 </goal>
 <goal name="path_inversion_left" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_inversion_left.0" proved="true">
  <proof prover="3" obsolete="true"><result status="valid" time="0.008123" steps="9974"/></proof>
  <proof prover="7"><result status="valid" time="0.003588" steps="4593"/></proof>
  </goal>
  <goal name="path_inversion_left.1" proved="true">
  <proof prover="3"><result status="valid" time="2.882973" steps="1269468"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="optimal_substructure" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="optimal_substructure.0" proved="true">
  <proof prover="7"><result status="valid" time="0.014365" steps="173909"/></proof>
  </goal>
  <goal name="optimal_substructure.1" proved="true">
  <proof prover="7"><result status="valid" time="0.017139" steps="172455"/></proof>
  </goal>
  <goal name="optimal_substructure.2" proved="true">
  <proof prover="7"><result status="valid" time="0.012457" steps="115577"/></proof>
  </goal>
  <goal name="optimal_substructure.3" proved="true">
  <proof prover="7"><result status="valid" time="0.037681" steps="115243"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_splitting" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.030372" steps="22986"/></proof>
 </goal>
 <goal name="path_splitting_noneq" proved="true">
 <proof prover="3" timelimit="1" obsolete="true"><result status="valid" time="0.086751" steps="80466"/></proof>
 <proof prover="7"><result status="valid" time="0.512574" steps="2140382"/></proof>
 </goal>
 <goal name="path_merging" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_merging.0" proved="true">
  <proof prover="3" obsolete="true"><result status="valid" time="0.007035" steps="8568"/></proof>
  <proof prover="7"><result status="valid" time="0.003662" steps="3759"/></proof>
  </goal>
  <goal name="path_merging.1" proved="true">
  <proof prover="7"><result status="valid" time="0.009531" steps="61241"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subpath_optimality_constraint" proved="true">
 <proof prover="8" timelimit="1"><result status="valid" time="0.073796" steps="779"/></proof>
 </goal>
 <goal name="consistent_implies_admissible" proved="true">
 <proof prover="7"><result status="valid" time="0.020283" steps="51100"/></proof>
 </goal>
 <goal name="Main_lemma" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.611051" steps="296288"/></proof>
 <proof prover="8" obsolete="true"><result status="valid" time="0.061687" steps="1064"/></proof>
 </goal>
 <goal name="Completeness_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="Completeness_lemma.0" proved="true">
  <proof prover="7"><result status="valid" time="0.003638" steps="5371"/></proof>
  </goal>
  <goal name="Completeness_lemma.1" proved="true">
  <proof prover="3" obsolete="true"><result status="valid" time="0.014688" steps="12783"/></proof>
  <proof prover="7"><result status="valid" time="0.011795" steps="74941"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_1" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="inside_or_exit_1.0" proved="true">
  <proof prover="7"><result status="valid" time="0.004277" steps="5648"/></proof>
  </goal>
  <goal name="inside_or_exit_1.1" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="inside_or_exit_1.1.0" proved="true">
   <transf name="case" proved="true" arg1="((not mem a s) \/ (not mem y s))">
    <goal name="inside_or_exit_1.1.0.0" expl="true case" proved="true">
    <proof prover="8" timelimit="1"><result status="valid" time="0.046083" steps="353"/></proof>
    </goal>
    <goal name="inside_or_exit_1.1.0.1" expl="false case" proved="true">
    <proof prover="7"><result status="valid" time="0.021931" steps="107082"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="inside_or_exit_2" proved="true">
 <proof prover="7"><result status="valid" time="0.011193" steps="73360"/></proof>
 </goal>
 <goal name="inside_or_exit" proved="true">
 <proof prover="7"><result status="valid" time="0.026825" steps="159504"/></proof>
 </goal>
 <goal name="shortest_path_code&#39;vc" expl="VC for shortest_path_code" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="shortest_path_code&#39;vc.0" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.0.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.0.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013931" steps="92666"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013508" steps="92412"/></proof>
    <proof prover="8" obsolete="true"><result status="valid" time="0.012597" steps="77"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013920" steps="95824"/></proof>
    <proof prover="8" obsolete="true"><result status="valid" time="0.013332" steps="66"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014108" steps="99759"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.013997" steps="94482"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="7"><result status="valid" time="0.014677" steps="95567"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3" obsolete="true"><result status="valid" time="0.023281" steps="16239"/></proof>
    <proof prover="7"><result status="valid" time="0.021920" steps="133344"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.0.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="case" proved="true" arg1="(x = src)">
     <goal name="shortest_path_code&#39;vc.0.0.7.0" expl="true case" proved="true">
     <transf name="cut" proved="true" arg1="(dx = 0)">
      <goal name="shortest_path_code&#39;vc.0.0.7.0.0" expl="true case" proved="true">
      <proof prover="3" obsolete="true"><result status="valid" time="0.022094" steps="15927"/></proof>
      <proof prover="7"><result status="valid" time="0.013798" steps="96743"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.0.0.7.0.1" expl="asserted formula" proved="true">
      <proof prover="3" obsolete="true"><result status="valid" time="0.015488" steps="14294"/></proof>
      <proof prover="7"><result status="valid" time="0.010568" steps="84137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="shortest_path_code&#39;vc.0.0.7.1" expl="false case" proved="true">
     <proof prover="7"><result status="valid" time="0.012111" steps="84520"/></proof>
     <proof prover="8" obsolete="true"><result status="valid" time="0.009713" steps="22"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.014756" steps="101150"/></proof>
  <proof prover="8" obsolete="true"><result status="valid" time="0.014492" steps="86"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3" obsolete="true"><result status="valid" time="0.015654" steps="14970"/></proof>
  <proof prover="7"><result status="valid" time="0.012637" steps="95467"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.3" expl="loop invariant init" proved="true">
  <transf name="exists" proved="true" arg1="src">
   <goal name="shortest_path_code&#39;vc.3.0" proved="true">
   <proof prover="7"><result status="valid" time="0.415561" steps="1736287"/></proof>
   <proof prover="8" obsolete="true"><result status="valid" time="0.069545" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.4" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.003977" steps="6739"/></proof>
  <proof prover="8" obsolete="true"><result status="valid" time="0.006961" steps="22"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.5" expl="assertion" proved="true">
  <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="622972"/></proof>
  <proof prover="7" obsolete="true"><result status="timeout" time="1.000000" steps="3543083"/></proof>
  <proof prover="8" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="7224"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="3" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="1040455"/></proof>
   <proof prover="7" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="17848120"/></proof>
   <proof prover="8" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="56397"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="shortest_path_code&#39;vc.5.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="shortest_path_code&#39;vc.5.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.020197" steps="139013"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.5.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="7"><result status="valid" time="0.064685" steps="360845"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.021323" steps="22059"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.127217" steps="57183"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.034519" steps="19178"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.017096" steps="16108"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.10" expl="loop invariant init" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.10.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.10.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.018171" steps="129242"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013023" steps="45"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.016112" steps="130531"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.026847" steps="18376"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.020838" steps="133750"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.072565" steps="116044"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.014208" steps="49"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.10.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.015640" steps="116073"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.048055" steps="31470"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.012081" steps="16073"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.13" expl="assertion" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.040525" steps="235602"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.14" expl="assertion" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.037423" steps="241087"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.15" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.030409" steps="20274"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.16" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.16.0" expl="loop invariant preservation" proved="true">
   <proof prover="3" memlimit="2000"><result status="valid" time="4.186673" steps="1274990"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.16.1" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.012279" steps="16339"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.057630" steps="58709"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.017232" steps="130639"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.19" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.19.0" expl="VC for shortest_path_code" proved="true">
   <transf name="unfold" proved="true" arg1="inv" arg2="in" arg3="LoopInvariant2">
    <goal name="shortest_path_code&#39;vc.19.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.19.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.019210" steps="131310"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.046774" steps="246154"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.2" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.015584" steps="121553"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.3" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.039970" steps="22609"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.4" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.032457" steps="133980"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.5" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.051393" steps="269082"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.6" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.018768" steps="17004"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.19.0.0.7" expl="VC for shortest_path_code" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="shortest_path_code&#39;vc.19.0.0.7.0" expl="VC for shortest_path_code" proved="true">
      <proof prover="3"><result status="valid" time="4.271634" steps="624945"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.19.0.0.7.1" expl="VC for shortest_path_code" proved="true">
      <proof prover="7" timelimit="5"><result status="valid" time="0.003978" steps="7901"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.112745" steps="53418"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.21" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.009424" steps="50"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.22" expl="loop variant decrease" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.016720" steps="123281"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.23" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.23.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.030380" steps="20146"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.23.1" expl="loop invariant preservation" proved="true">
   <proof prover="7" timelimit="5"><result status="valid" time="0.004211" steps="126411"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.018201" steps="16686"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="8"><result status="valid" time="0.014977" steps="72"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.004295" steps="7828"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.27" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv_succ2" arg2="in" arg3="LoopInvariant2">
   <goal name="shortest_path_code&#39;vc.27.0" expl="loop invariant preservation" proved="true">
   <transf name="unfold" proved="true" arg1="inv_succ2">
    <goal name="shortest_path_code&#39;vc.27.0.0" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.27.0.0.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.186500" steps="46466"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.27.0.0.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.068564" steps="46927"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.28" expl="assertion" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.044199" steps="11167"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.29" expl="assertion" proved="true">
  <proof prover="8"><result status="valid" time="0.032409" steps="420"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.30" expl="loop variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.029206" steps="20120"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.31" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.31.0" expl="loop invariant preservation" proved="true">
   <proof prover="7" timelimit="5"><result status="valid" time="0.017358" steps="3962"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.31.1" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.658937" steps="202919"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.32" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.101432" steps="45993"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.030990" steps="20835"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.34" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.34.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.34.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.034507" steps="398"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.045955" steps="241835"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.015926" steps="121096"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.023410" steps="159978"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.017088" steps="132368"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.045518" steps="24893"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.018323" steps="17036"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.34.0.7" expl="VC for shortest_path_code" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="shortest_path_code&#39;vc.34.0.7.0" expl="VC for shortest_path_code" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.004358" steps="3965"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.34.0.7.1" expl="VC for shortest_path_code" proved="true">
     <proof prover="3"><result status="valid" time="0.098058" steps="47279"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.35" expl="loop invariant preservation" proved="true">
  <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.220888" steps="274909"/></proof>
  <proof prover="7" obsolete="true"><result status="timeout" time="1.000000" steps="4108647"/></proof>
  <proof prover="8" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="8718"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="shortest_path_code&#39;vc.35.0" expl="loop invariant preservation" proved="true">
   <proof prover="7" timelimit="5"><result status="valid" time="0.004263" steps="3965"/></proof>
   </goal>
   <goal name="shortest_path_code&#39;vc.35.1" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.389872" steps="149003"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.36" expl="loop variant decrease" proved="true">
  <proof prover="7" timelimit="5"><result status="valid" time="0.015733" steps="118987"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.37" expl="loop invariant preservation" proved="true">
  <transf name="unfold" proved="true" arg1="inv">
   <goal name="shortest_path_code&#39;vc.37.0" expl="VC for shortest_path_code" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="shortest_path_code&#39;vc.37.0.0" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013188" steps="49"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.1" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013488" steps="50"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.2" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.014679" steps="112812"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.3" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.013863" steps="50"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.4" expl="VC for shortest_path_code" proved="true">
    <proof prover="3"><result status="valid" time="0.031375" steps="19961"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.5" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.015827" steps="120816"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.6" expl="VC for shortest_path_code" proved="true">
    <proof prover="8"><result status="valid" time="0.014023" steps="53"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.37.0.7" expl="VC for shortest_path_code" proved="true">
    <proof prover="7" timelimit="5"><result status="valid" time="0.017614" steps="121221"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.38" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.045481" steps="27255"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.39" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.083651" steps="19284"/></proof>
  </goal>
  <goal name="shortest_path_code&#39;vc.40" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="inside_or_exit" arg2="(closed.to_fset), src, n, dist">
   <goal name="shortest_path_code&#39;vc.40.0" expl="loop invariant preservation" proved="true">
   <transf name="case" proved="true" arg1="(mem src open)">
    <goal name="shortest_path_code&#39;vc.40.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="8"><result status="valid" time="0.033397" steps="321"/></proof>
    </goal>
    <goal name="shortest_path_code&#39;vc.40.0.1" expl="false case (loop invariant preservation)" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Hinst">
     <goal name="shortest_path_code&#39;vc.40.0.1.0" expl="destruct premise" proved="true">
     <proof prover="8"><result status="valid" time="0.014452" steps="61"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.40.0.1.1" expl="destruct premise" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.004461" steps="7743"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.40.0.1.2" expl="destruct premise" proved="true">
     <proof prover="7" timelimit="5"><result status="valid" time="0.004590" steps="7745"/></proof>
     </goal>
     <goal name="shortest_path_code&#39;vc.40.0.1.3" expl="false case (loop invariant preservation)" proved="true">
     <transf name="assert" proved="true" arg1="(shortest_path src z d[z])">
      <goal name="shortest_path_code&#39;vc.40.0.1.3.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.411013" steps="244613"/></proof>
      </goal>
      <goal name="shortest_path_code&#39;vc.40.0.1.3.1" expl="false case (loop invariant preservation)" proved="true">
      <transf name="exists" proved="true" arg1="z">
       <goal name="shortest_path_code&#39;vc.40.0.1.3.1.0" proved="true">
       <proof prover="7" timelimit="5"><result status="valid" time="0.057918" steps="329021"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="shortest_path_code&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="7"><result status="valid" time="0.058108" steps="137903"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
